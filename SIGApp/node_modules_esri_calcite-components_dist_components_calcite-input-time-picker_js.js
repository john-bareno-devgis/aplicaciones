"use strict";
(self["webpackChunkrealgis"] = self["webpackChunkrealgis"] || []).push([["node_modules_esri_calcite-components_dist_components_calcite-input-time-picker_js"],{

/***/ 80374:
/*!********************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/components/calcite-input-time-picker.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CalciteInputTimePicker": () => (/* binding */ CalciteInputTimePicker),
/* harmony export */   "d": () => (/* binding */ dayjs),
/* harmony export */   "defineCustomElement": () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ 40994);
/* harmony import */ var _form_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./form.js */ 2015);
/* harmony import */ var _guid_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./guid.js */ 38722);
/* harmony import */ var _interactive_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interactive.js */ 59338);
/* harmony import */ var _key_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./key.js */ 78407);
/* harmony import */ var _label2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./label2.js */ 9873);
/* harmony import */ var _loadable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadable.js */ 80483);
/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locale.js */ 9333);
/* harmony import */ var _focusTrapComponent_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./focusTrapComponent.js */ 12335);
/* harmony import */ var _time_picker_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./time-picker.js */ 55734);
/* harmony import */ var _t9n_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./t9n.js */ 75301);
/* harmony import */ var _openCloseComponent_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./openCloseComponent.js */ 84634);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./math.js */ 75104);
/* harmony import */ var _component_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./component.js */ 90662);
/* harmony import */ var _action_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./action.js */ 20694);
/* harmony import */ var _icon_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./icon.js */ 2706);
/* harmony import */ var _input_text_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./input-text.js */ 92188);
/* harmony import */ var _loader_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./loader.js */ 31765);
/* harmony import */ var _popover_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./popover.js */ 71135);
/* harmony import */ var _progress_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./progress.js */ 92079);

/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */




















const CSS = {
  toggleIcon: "toggle-icon"
};
var SECONDS_A_MINUTE = 60;
var SECONDS_A_HOUR = SECONDS_A_MINUTE * 60;
var SECONDS_A_DAY = SECONDS_A_HOUR * 24;
var SECONDS_A_WEEK = SECONDS_A_DAY * 7;
var MILLISECONDS_A_SECOND = 1e3;
var MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND;
var MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND;
var MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND;
var MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND; // English locales

var MS = 'millisecond';
var S = 'second';
var MIN = 'minute';
var H = 'hour';
var D = 'day';
var W = 'week';
var M = 'month';
var Q = 'quarter';
var Y = 'year';
var DATE = 'date';
var FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ';
var INVALID_DATE_STRING = 'Invalid Date'; // regex

var REGEX_PARSE = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/;
var REGEX_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;

// English [en]
// We don't need weekdaysShort, weekdaysMin, monthsShort in en.js locale
const en = {
  name: 'en',
  weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
  months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
  ordinal: function ordinal(n) {
    var s = ['th', 'st', 'nd', 'rd'];
    var v = n % 100;
    return "[" + n + (s[(v - 20) % 10] || s[v] || s[0]) + "]";
  }
};
const en$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': en
});
var padStart = function padStart(string, length, pad) {
  var s = String(string);
  if (!s || s.length >= length) return string;
  return "" + Array(length + 1 - s.length).join(pad) + string;
};
var padZoneStr = function padZoneStr(instance) {
  var negMinutes = -instance.utcOffset();
  var minutes = Math.abs(negMinutes);
  var hourOffset = Math.floor(minutes / 60);
  var minuteOffset = minutes % 60;
  return "" + (negMinutes <= 0 ? '+' : '-') + padStart(hourOffset, 2, '0') + ":" + padStart(minuteOffset, 2, '0');
};
var monthDiff = function monthDiff(a, b) {
  // function from moment.js in order to keep the same result
  if (a.date() < b.date()) return -monthDiff(b, a);
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month());
  var anchor = a.clone().add(wholeMonthDiff, M);
  var c = b - anchor < 0;
  var anchor2 = a.clone().add(wholeMonthDiff + (c ? -1 : 1), M);
  return +(-(wholeMonthDiff + (b - anchor) / (c ? anchor - anchor2 : anchor2 - anchor)) || 0);
};
var absFloor = function absFloor(n) {
  return n < 0 ? Math.ceil(n) || 0 : Math.floor(n);
};
var prettyUnit = function prettyUnit(u) {
  var special = {
    M: M,
    y: Y,
    w: W,
    d: D,
    D: DATE,
    h: H,
    m: MIN,
    s: S,
    ms: MS,
    Q: Q
  };
  return special[u] || String(u || '').toLowerCase().replace(/s$/, '');
};
var isUndefined = function isUndefined(s) {
  return s === undefined;
};
const U = {
  s: padStart,
  z: padZoneStr,
  m: monthDiff,
  a: absFloor,
  p: prettyUnit,
  u: isUndefined
};
var L = 'en'; // global locale

var Ls = {}; // global loaded locale

Ls[L] = en;
var IS_DAYJS = '$isDayjsObject'; // eslint-disable-next-line no-use-before-define

var isDayjs = function isDayjs(d) {
  return d instanceof Dayjs || !!(d && d[IS_DAYJS]);
};
var parseLocale = function parseLocale(preset, object, isLocal) {
  var l;
  if (!preset) return L;
  if (typeof preset === 'string') {
    var presetLower = preset.toLowerCase();
    if (Ls[presetLower]) {
      l = presetLower;
    }
    if (object) {
      Ls[presetLower] = object;
      l = presetLower;
    }
    var presetSplit = preset.split('-');
    if (!l && presetSplit.length > 1) {
      return parseLocale(presetSplit[0]);
    }
  } else {
    var name = preset.name;
    Ls[name] = preset;
    l = name;
  }
  if (!isLocal && l) L = l;
  return l || !isLocal && L;
};
var dayjs = function dayjs(date, c) {
  if (isDayjs(date)) {
    return date.clone();
  } // eslint-disable-next-line no-nested-ternary

  var cfg = typeof c === 'object' ? c : {};
  cfg.date = date;
  cfg.args = arguments; // eslint-disable-line prefer-rest-params

  return new Dayjs(cfg); // eslint-disable-line no-use-before-define
};

var wrapper = function wrapper(date, instance) {
  return dayjs(date, {
    locale: instance.$L,
    utc: instance.$u,
    x: instance.$x,
    $offset: instance.$offset // todo: refactor; do not use this.$offset in you code
  });
};

var Utils = U; // for plugin use

Utils.l = parseLocale;
Utils.i = isDayjs;
Utils.w = wrapper;
var parseDate = function parseDate(cfg) {
  var date = cfg.date,
    utc = cfg.utc;
  if (date === null) return new Date(NaN); // null is invalid

  if (Utils.u(date)) return new Date(); // today

  if (date instanceof Date) return new Date(date);
  if (typeof date === 'string' && !/Z$/i.test(date)) {
    var d = date.match(REGEX_PARSE);
    if (d) {
      var m = d[2] - 1 || 0;
      var ms = (d[7] || '0').substring(0, 3);
      if (utc) {
        return new Date(Date.UTC(d[1], m, d[3] || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms));
      }
      return new Date(d[1], m, d[3] || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms);
    }
  }
  return new Date(date); // everything else
};

var Dayjs = /*#__PURE__*/function () {
  function Dayjs(cfg) {
    this.$L = parseLocale(cfg.locale, null, true);
    this.parse(cfg); // for plugin

    this.$x = this.$x || cfg.x || {};
    this[IS_DAYJS] = true;
  }
  var _proto = Dayjs.prototype;
  _proto.parse = function parse(cfg) {
    this.$d = parseDate(cfg);
    this.init();
  };
  _proto.init = function init() {
    var $d = this.$d;
    this.$y = $d.getFullYear();
    this.$M = $d.getMonth();
    this.$D = $d.getDate();
    this.$W = $d.getDay();
    this.$H = $d.getHours();
    this.$m = $d.getMinutes();
    this.$s = $d.getSeconds();
    this.$ms = $d.getMilliseconds();
  } // eslint-disable-next-line class-methods-use-this
  ;

  _proto.$utils = function $utils() {
    return Utils;
  };
  _proto.isValid = function isValid() {
    return !(this.$d.toString() === INVALID_DATE_STRING);
  };
  _proto.isSame = function isSame(that, units) {
    var other = dayjs(that);
    return this.startOf(units) <= other && other <= this.endOf(units);
  };
  _proto.isAfter = function isAfter(that, units) {
    return dayjs(that) < this.startOf(units);
  };
  _proto.isBefore = function isBefore(that, units) {
    return this.endOf(units) < dayjs(that);
  };
  _proto.$g = function $g(input, get, set) {
    if (Utils.u(input)) return this[get];
    return this.set(set, input);
  };
  _proto.unix = function unix() {
    return Math.floor(this.valueOf() / 1000);
  };
  _proto.valueOf = function valueOf() {
    // timezone(hour) * 60 * 60 * 1000 => ms
    return this.$d.getTime();
  };
  _proto.startOf = function startOf(units, _startOf) {
    var _this = this;

    // startOf -> endOf
    var isStartOf = !Utils.u(_startOf) ? _startOf : true;
    var unit = Utils.p(units);
    var instanceFactory = function instanceFactory(d, m) {
      var ins = Utils.w(_this.$u ? Date.UTC(_this.$y, m, d) : new Date(_this.$y, m, d), _this);
      return isStartOf ? ins : ins.endOf(D);
    };
    var instanceFactorySet = function instanceFactorySet(method, slice) {
      var argumentStart = [0, 0, 0, 0];
      var argumentEnd = [23, 59, 59, 999];
      return Utils.w(_this.toDate()[method].apply(
      // eslint-disable-line prefer-spread
      _this.toDate('s'), (isStartOf ? argumentStart : argumentEnd).slice(slice)), _this);
    };
    var $W = this.$W,
      $M = this.$M,
      $D = this.$D;
    var utcPad = "set" + (this.$u ? 'UTC' : '');
    switch (unit) {
      case Y:
        return isStartOf ? instanceFactory(1, 0) : instanceFactory(31, 11);
      case M:
        return isStartOf ? instanceFactory(1, $M) : instanceFactory(0, $M + 1);
      case W:
        {
          var weekStart = this.$locale().weekStart || 0;
          var gap = ($W < weekStart ? $W + 7 : $W) - weekStart;
          return instanceFactory(isStartOf ? $D - gap : $D + (6 - gap), $M);
        }
      case D:
      case DATE:
        return instanceFactorySet(utcPad + "Hours", 0);
      case H:
        return instanceFactorySet(utcPad + "Minutes", 1);
      case MIN:
        return instanceFactorySet(utcPad + "Seconds", 2);
      case S:
        return instanceFactorySet(utcPad + "Milliseconds", 3);
      default:
        return this.clone();
    }
  };
  _proto.endOf = function endOf(arg) {
    return this.startOf(arg, false);
  };
  _proto.$set = function $set(units, _int) {
    var _C$D$C$DATE$C$M$C$Y$C;

    // private set
    var unit = Utils.p(units);
    var utcPad = "set" + (this.$u ? 'UTC' : '');
    var name = (_C$D$C$DATE$C$M$C$Y$C = {}, _C$D$C$DATE$C$M$C$Y$C[D] = utcPad + "Date", _C$D$C$DATE$C$M$C$Y$C[DATE] = utcPad + "Date", _C$D$C$DATE$C$M$C$Y$C[M] = utcPad + "Month", _C$D$C$DATE$C$M$C$Y$C[Y] = utcPad + "FullYear", _C$D$C$DATE$C$M$C$Y$C[H] = utcPad + "Hours", _C$D$C$DATE$C$M$C$Y$C[MIN] = utcPad + "Minutes", _C$D$C$DATE$C$M$C$Y$C[S] = utcPad + "Seconds", _C$D$C$DATE$C$M$C$Y$C[MS] = utcPad + "Milliseconds", _C$D$C$DATE$C$M$C$Y$C)[unit];
    var arg = unit === D ? this.$D + (_int - this.$W) : _int;
    if (unit === M || unit === Y) {
      // clone is for badMutable plugin
      var date = this.clone().set(DATE, 1);
      date.$d[name](arg);
      date.init();
      this.$d = date.set(DATE, Math.min(this.$D, date.daysInMonth())).$d;
    } else if (name) this.$d[name](arg);
    this.init();
    return this;
  };
  _proto.set = function set(string, _int2) {
    return this.clone().$set(string, _int2);
  };
  _proto.get = function get(unit) {
    return this[Utils.p(unit)]();
  };
  _proto.add = function add(number, units) {
    var _this2 = this,
      _C$MIN$C$H$C$S$unit;
    number = Number(number); // eslint-disable-line no-param-reassign

    var unit = Utils.p(units);
    var instanceFactorySet = function instanceFactorySet(n) {
      var d = dayjs(_this2);
      return Utils.w(d.date(d.date() + Math.round(n * number)), _this2);
    };
    if (unit === M) {
      return this.set(M, this.$M + number);
    }
    if (unit === Y) {
      return this.set(Y, this.$y + number);
    }
    if (unit === D) {
      return instanceFactorySet(1);
    }
    if (unit === W) {
      return instanceFactorySet(7);
    }
    var step = (_C$MIN$C$H$C$S$unit = {}, _C$MIN$C$H$C$S$unit[MIN] = MILLISECONDS_A_MINUTE, _C$MIN$C$H$C$S$unit[H] = MILLISECONDS_A_HOUR, _C$MIN$C$H$C$S$unit[S] = MILLISECONDS_A_SECOND, _C$MIN$C$H$C$S$unit)[unit] || 1; // ms

    var nextTimeStamp = this.$d.getTime() + number * step;
    return Utils.w(nextTimeStamp, this);
  };
  _proto.subtract = function subtract(number, string) {
    return this.add(number * -1, string);
  };
  _proto.format = function format(formatStr) {
    var _this3 = this;
    var locale = this.$locale();
    if (!this.isValid()) return locale.invalidDate || INVALID_DATE_STRING;
    var str = formatStr || FORMAT_DEFAULT;
    var zoneStr = Utils.z(this);
    var $H = this.$H,
      $m = this.$m,
      $M = this.$M;
    var weekdays = locale.weekdays,
      months = locale.months,
      meridiem = locale.meridiem;
    var getShort = function getShort(arr, index, full, length) {
      return arr && (arr[index] || arr(_this3, str)) || full[index].slice(0, length);
    };
    var get$H = function get$H(num) {
      return Utils.s($H % 12 || 12, num, '0');
    };
    var meridiemFunc = meridiem || function (hour, minute, isLowercase) {
      var m = hour < 12 ? 'AM' : 'PM';
      return isLowercase ? m.toLowerCase() : m;
    };
    var matches = function matches(match) {
      switch (match) {
        case 'YY':
          return String(_this3.$y).slice(-2);
        case 'YYYY':
          return Utils.s(_this3.$y, 4, '0');
        case 'M':
          return $M + 1;
        case 'MM':
          return Utils.s($M + 1, 2, '0');
        case 'MMM':
          return getShort(locale.monthsShort, $M, months, 3);
        case 'MMMM':
          return getShort(months, $M);
        case 'D':
          return _this3.$D;
        case 'DD':
          return Utils.s(_this3.$D, 2, '0');
        case 'd':
          return String(_this3.$W);
        case 'dd':
          return getShort(locale.weekdaysMin, _this3.$W, weekdays, 2);
        case 'ddd':
          return getShort(locale.weekdaysShort, _this3.$W, weekdays, 3);
        case 'dddd':
          return weekdays[_this3.$W];
        case 'H':
          return String($H);
        case 'HH':
          return Utils.s($H, 2, '0');
        case 'h':
          return get$H(1);
        case 'hh':
          return get$H(2);
        case 'a':
          return meridiemFunc($H, $m, true);
        case 'A':
          return meridiemFunc($H, $m, false);
        case 'm':
          return String($m);
        case 'mm':
          return Utils.s($m, 2, '0');
        case 's':
          return String(_this3.$s);
        case 'ss':
          return Utils.s(_this3.$s, 2, '0');
        case 'SSS':
          return Utils.s(_this3.$ms, 3, '0');
        case 'Z':
          return zoneStr;
      }
      return null;
    };
    return str.replace(REGEX_FORMAT, function (match, $1) {
      return $1 || matches(match) || zoneStr.replace(':', '');
    }); // 'ZZ'
  };

  _proto.utcOffset = function utcOffset() {
    // Because a bug at FF24, we're rounding the timezone offset around 15 minutes
    // https://github.com/moment/moment/pull/1871
    return -Math.round(this.$d.getTimezoneOffset() / 15) * 15;
  };
  _proto.diff = function diff(input, units, _float) {
    var _this4 = this;
    var unit = Utils.p(units);
    var that = dayjs(input);
    var zoneDelta = (that.utcOffset() - this.utcOffset()) * MILLISECONDS_A_MINUTE;
    var diff = this - that;
    var getMonth = function getMonth() {
      return Utils.m(_this4, that);
    };
    var result;
    switch (unit) {
      case Y:
        result = getMonth() / 12;
        break;
      case M:
        result = getMonth();
        break;
      case Q:
        result = getMonth() / 3;
        break;
      case W:
        result = (diff - zoneDelta) / MILLISECONDS_A_WEEK;
        break;
      case D:
        result = (diff - zoneDelta) / MILLISECONDS_A_DAY;
        break;
      case H:
        result = diff / MILLISECONDS_A_HOUR;
        break;
      case MIN:
        result = diff / MILLISECONDS_A_MINUTE;
        break;
      case S:
        result = diff / MILLISECONDS_A_SECOND;
        break;
      default:
        result = diff; // milliseconds

        break;
    }
    return _float ? result : Utils.a(result);
  };
  _proto.daysInMonth = function daysInMonth() {
    return this.endOf(M).$D;
  };
  _proto.$locale = function $locale() {
    // get locale object
    return Ls[this.$L];
  };
  _proto.locale = function locale(preset, object) {
    if (!preset) return this.$L;
    var that = this.clone();
    var nextLocaleName = parseLocale(preset, object, true);
    if (nextLocaleName) that.$L = nextLocaleName;
    return that;
  };
  _proto.clone = function clone() {
    return Utils.w(this.$d, this);
  };
  _proto.toDate = function toDate() {
    return new Date(this.valueOf());
  };
  _proto.toJSON = function toJSON() {
    return this.isValid() ? this.toISOString() : null;
  };
  _proto.toISOString = function toISOString() {
    // ie 8 return
    // new Dayjs(this.valueOf() + this.$d.getTimezoneOffset() * 60000)
    // .format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')
    return this.$d.toISOString();
  };
  _proto.toString = function toString() {
    return this.$d.toUTCString();
  };
  return Dayjs;
}();
var proto = Dayjs.prototype;
dayjs.prototype = proto;
[['$ms', MS], ['$s', S], ['$m', MIN], ['$H', H], ['$W', D], ['$M', M], ['$y', Y], ['$D', DATE]].forEach(function (g) {
  proto[g[1]] = function (input) {
    return this.$g(input, g[0], g[1]);
  };
});
dayjs.extend = function (plugin, option) {
  if (!plugin.$i) {
    // install plugin only once
    plugin(option, Dayjs, dayjs);
    plugin.$i = true;
  }
  return dayjs;
};
dayjs.locale = parseLocale;
dayjs.isDayjs = isDayjs;
dayjs.unix = function (timestamp) {
  return dayjs(timestamp * 1e3);
};
dayjs.en = Ls[L];
dayjs.Ls = Ls;
dayjs.p = {};

// eslint-disable-next-line import/prefer-default-export
var t = function t(format) {
  return format.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (_, a, b) {
    return a || b.slice(1);
  });
};
var englishFormats = {
  LTS: 'h:mm:ss A',
  LT: 'h:mm A',
  L: 'MM/DD/YYYY',
  LL: 'MMMM D, YYYY',
  LLL: 'MMMM D, YYYY h:mm A',
  LLLL: 'dddd, MMMM D, YYYY h:mm A'
};
var u = function u(formatStr, formats) {
  return formatStr.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (_, a, b) {
    var B = b && b.toUpperCase();
    return a || formats[b] || englishFormats[b] || t(formats[B]);
  });
};
var formattingTokens = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g;
var match1 = /\d/; // 0 - 9

var match2 = /\d\d/; // 00 - 99

var match3 = /\d{3}/; // 000 - 999

var match4 = /\d{4}/; // 0000 - 9999

var match1to2 = /\d\d?/; // 0 - 99

var matchSigned = /[+-]?\d+/; // -inf - inf

var matchOffset = /[+-]\d\d:?(\d\d)?|Z/; // +00:00 -00:00 +0000 or -0000 +00 or Z

var matchWord = /\d*[^-_:/,()\s\d]+/; // Word

var locale = {};
var parseTwoDigitYear = function parseTwoDigitYear(input) {
  input = +input;
  return input + (input > 68 ? 1900 : 2000);
};
function offsetFromString(string) {
  if (!string) return 0;
  if (string === 'Z') return 0;
  var parts = string.match(/([+-]|\d\d)/g);
  var minutes = +(parts[1] * 60) + (+parts[2] || 0);
  return minutes === 0 ? 0 : parts[0] === '+' ? -minutes : minutes; // eslint-disable-line no-nested-ternary
}

var addInput = function addInput(property) {
  return function (input) {
    this[property] = +input;
  };
};
var zoneExpressions = [matchOffset, function (input) {
  var zone = this.zone || (this.zone = {});
  zone.offset = offsetFromString(input);
}];
var getLocalePart = function getLocalePart(name) {
  var part = locale[name];
  return part && (part.indexOf ? part : part.s.concat(part.f));
};
var meridiemMatch = function meridiemMatch(input, isLowerCase) {
  var isAfternoon;
  var _locale = locale,
    meridiem = _locale.meridiem;
  if (!meridiem) {
    isAfternoon = input === (isLowerCase ? 'pm' : 'PM');
  } else {
    for (var i = 1; i <= 24; i += 1) {
      // todo: fix input === meridiem(i, 0, isLowerCase)
      if (input.indexOf(meridiem(i, 0, isLowerCase)) > -1) {
        isAfternoon = i > 12;
        break;
      }
    }
  }
  return isAfternoon;
};
var expressions = {
  A: [matchWord, function (input) {
    this.afternoon = meridiemMatch(input, false);
  }],
  a: [matchWord, function (input) {
    this.afternoon = meridiemMatch(input, true);
  }],
  S: [match1, function (input) {
    this.milliseconds = +input * 100;
  }],
  SS: [match2, function (input) {
    this.milliseconds = +input * 10;
  }],
  SSS: [match3, function (input) {
    this.milliseconds = +input;
  }],
  s: [match1to2, addInput('seconds')],
  ss: [match1to2, addInput('seconds')],
  m: [match1to2, addInput('minutes')],
  mm: [match1to2, addInput('minutes')],
  H: [match1to2, addInput('hours')],
  h: [match1to2, addInput('hours')],
  HH: [match1to2, addInput('hours')],
  hh: [match1to2, addInput('hours')],
  D: [match1to2, addInput('day')],
  DD: [match2, addInput('day')],
  Do: [matchWord, function (input) {
    var _locale2 = locale,
      ordinal = _locale2.ordinal;
    var _input$match = input.match(/\d+/);
    this.day = _input$match[0];
    if (!ordinal) return;
    for (var i = 1; i <= 31; i += 1) {
      if (ordinal(i).replace(/\[|\]/g, '') === input) {
        this.day = i;
      }
    }
  }],
  M: [match1to2, addInput('month')],
  MM: [match2, addInput('month')],
  MMM: [matchWord, function (input) {
    var months = getLocalePart('months');
    var monthsShort = getLocalePart('monthsShort');
    var matchIndex = (monthsShort || months.map(function (_) {
      return _.slice(0, 3);
    })).indexOf(input) + 1;
    if (matchIndex < 1) {
      throw new Error();
    }
    this.month = matchIndex % 12 || matchIndex;
  }],
  MMMM: [matchWord, function (input) {
    var months = getLocalePart('months');
    var matchIndex = months.indexOf(input) + 1;
    if (matchIndex < 1) {
      throw new Error();
    }
    this.month = matchIndex % 12 || matchIndex;
  }],
  Y: [matchSigned, addInput('year')],
  YY: [match2, function (input) {
    this.year = parseTwoDigitYear(input);
  }],
  YYYY: [match4, addInput('year')],
  Z: zoneExpressions,
  ZZ: zoneExpressions
};
function correctHours(time) {
  var afternoon = time.afternoon;
  if (afternoon !== undefined) {
    var hours = time.hours;
    if (afternoon) {
      if (hours < 12) {
        time.hours += 12;
      }
    } else if (hours === 12) {
      time.hours = 0;
    }
    delete time.afternoon;
  }
}
function makeParser(format) {
  format = u(format, locale && locale.formats);
  var array = format.match(formattingTokens);
  var length = array.length;
  for (var i = 0; i < length; i += 1) {
    var token = array[i];
    var parseTo = expressions[token];
    var regex = parseTo && parseTo[0];
    var parser = parseTo && parseTo[1];
    if (parser) {
      array[i] = {
        regex: regex,
        parser: parser
      };
    } else {
      array[i] = token.replace(/^\[|\]$/g, '');
    }
  }
  return function (input) {
    var time = {};
    for (var _i = 0, start = 0; _i < length; _i += 1) {
      var _token = array[_i];
      if (typeof _token === 'string') {
        start += _token.length;
      } else {
        var _regex = _token.regex,
          _parser = _token.parser;
        var part = input.slice(start);
        var match = _regex.exec(part);
        var value = match[0];
        _parser.call(time, value);
        input = input.replace(value, '');
      }
    }
    correctHours(time);
    return time;
  };
}
var parseFormattedInput = function parseFormattedInput(input, format, utc) {
  try {
    if (['x', 'X'].indexOf(format) > -1) return new Date((format === 'X' ? 1000 : 1) * input);
    var parser = makeParser(format);
    var _parser2 = parser(input),
      year = _parser2.year,
      month = _parser2.month,
      day = _parser2.day,
      hours = _parser2.hours,
      minutes = _parser2.minutes,
      seconds = _parser2.seconds,
      milliseconds = _parser2.milliseconds,
      zone = _parser2.zone;
    var now = new Date();
    var d = day || (!year && !month ? now.getDate() : 1);
    var y = year || now.getFullYear();
    var M = 0;
    if (!(year && !month)) {
      M = month > 0 ? month - 1 : now.getMonth();
    }
    var h = hours || 0;
    var m = minutes || 0;
    var s = seconds || 0;
    var ms = milliseconds || 0;
    if (zone) {
      return new Date(Date.UTC(y, M, d, h, m, s, ms + zone.offset * 60 * 1000));
    }
    if (utc) {
      return new Date(Date.UTC(y, M, d, h, m, s, ms));
    }
    return new Date(y, M, d, h, m, s, ms);
  } catch (e) {
    return new Date(''); // Invalid Date
  }
};

const customParseFormat = function (o, C, d) {
  d.p.customParseFormat = true;
  if (o && o.parseTwoDigitYear) {
    parseTwoDigitYear = o.parseTwoDigitYear;
  }
  var proto = C.prototype;
  var oldParse = proto.parse;
  proto.parse = function (cfg) {
    var date = cfg.date,
      utc = cfg.utc,
      args = cfg.args;
    this.$u = utc;
    var format = args[1];
    if (typeof format === 'string') {
      var isStrictWithoutLocale = args[2] === true;
      var isStrictWithLocale = args[3] === true;
      var isStrict = isStrictWithoutLocale || isStrictWithLocale;
      var pl = args[2];
      if (isStrictWithLocale) {
        pl = args[2];
      }
      locale = this.$locale();
      if (!isStrictWithoutLocale && pl) {
        locale = d.Ls[pl];
      }
      this.$d = parseFormattedInput(date, format, utc);
      this.init();
      if (pl && pl !== true) this.$L = this.locale(pl).$L; // use != to treat
      // input number 1410715640579 and format string '1410715640579' equal
      // eslint-disable-next-line eqeqeq

      if (isStrict && date != this.format(format)) {
        this.$d = new Date('');
      } // reset global locale to make parallel unit test

      locale = {};
    } else if (format instanceof Array) {
      var len = format.length;
      for (var i = 1; i <= len; i += 1) {
        args[1] = format[i - 1];
        var result = d.apply(this, args);
        if (result.isValid()) {
          this.$d = result.$d;
          this.$L = result.$L;
          this.init();
          break;
        }
        if (i === len) this.$d = new Date('');
      }
    } else {
      oldParse.call(this, cfg);
    }
  };
};
const localeData = function (o, c, dayjs) {
  // locale needed later
  var proto = c.prototype;
  var getLocalePart = function getLocalePart(part) {
    return part && (part.indexOf ? part : part.s);
  };
  var getShort = function getShort(ins, target, full, num, localeOrder) {
    var locale = ins.name ? ins : ins.$locale();
    var targetLocale = getLocalePart(locale[target]);
    var fullLocale = getLocalePart(locale[full]);
    var result = targetLocale || fullLocale.map(function (f) {
      return f.slice(0, num);
    });
    if (!localeOrder) return result;
    var weekStart = locale.weekStart;
    return result.map(function (_, index) {
      return result[(index + (weekStart || 0)) % 7];
    });
  };
  var getDayjsLocaleObject = function getDayjsLocaleObject() {
    return dayjs.Ls[dayjs.locale()];
  };
  var getLongDateFormat = function getLongDateFormat(l, format) {
    return l.formats[format] || t(l.formats[format.toUpperCase()]);
  };
  var localeData = function localeData() {
    var _this = this;
    return {
      months: function months(instance) {
        return instance ? instance.format('MMMM') : getShort(_this, 'months');
      },
      monthsShort: function monthsShort(instance) {
        return instance ? instance.format('MMM') : getShort(_this, 'monthsShort', 'months', 3);
      },
      firstDayOfWeek: function firstDayOfWeek() {
        return _this.$locale().weekStart || 0;
      },
      weekdays: function weekdays(instance) {
        return instance ? instance.format('dddd') : getShort(_this, 'weekdays');
      },
      weekdaysMin: function weekdaysMin(instance) {
        return instance ? instance.format('dd') : getShort(_this, 'weekdaysMin', 'weekdays', 2);
      },
      weekdaysShort: function weekdaysShort(instance) {
        return instance ? instance.format('ddd') : getShort(_this, 'weekdaysShort', 'weekdays', 3);
      },
      longDateFormat: function longDateFormat(format) {
        return getLongDateFormat(_this.$locale(), format);
      },
      meridiem: this.$locale().meridiem,
      ordinal: this.$locale().ordinal
    };
  };
  proto.localeData = function () {
    return localeData.bind(this)();
  };
  dayjs.localeData = function () {
    var localeObject = getDayjsLocaleObject();
    return {
      firstDayOfWeek: function firstDayOfWeek() {
        return localeObject.weekStart || 0;
      },
      weekdays: function weekdays() {
        return dayjs.weekdays();
      },
      weekdaysShort: function weekdaysShort() {
        return dayjs.weekdaysShort();
      },
      weekdaysMin: function weekdaysMin() {
        return dayjs.weekdaysMin();
      },
      months: function months() {
        return dayjs.months();
      },
      monthsShort: function monthsShort() {
        return dayjs.monthsShort();
      },
      longDateFormat: function longDateFormat(format) {
        return getLongDateFormat(localeObject, format);
      },
      meridiem: localeObject.meridiem,
      ordinal: localeObject.ordinal
    };
  };
  dayjs.months = function () {
    return getShort(getDayjsLocaleObject(), 'months');
  };
  dayjs.monthsShort = function () {
    return getShort(getDayjsLocaleObject(), 'monthsShort', 'months', 3);
  };
  dayjs.weekdays = function (localeOrder) {
    return getShort(getDayjsLocaleObject(), 'weekdays', null, null, localeOrder);
  };
  dayjs.weekdaysShort = function (localeOrder) {
    return getShort(getDayjsLocaleObject(), 'weekdaysShort', 'weekdays', 3, localeOrder);
  };
  dayjs.weekdaysMin = function (localeOrder) {
    return getShort(getDayjsLocaleObject(), 'weekdaysMin', 'weekdays', 2, localeOrder);
  };
};
const localizedFormat = function (o, c, d) {
  var proto = c.prototype;
  var oldFormat = proto.format;
  d.en.formats = englishFormats;
  proto.format = function (formatStr) {
    if (formatStr === void 0) {
      formatStr = FORMAT_DEFAULT;
    }
    var _this$$locale = this.$locale(),
      _this$$locale$formats = _this$$locale.formats,
      formats = _this$$locale$formats === void 0 ? {} : _this$$locale$formats;
    var result = u(formatStr, formats);
    return oldFormat.call(this, result);
  };
};

// Plugin template from https://day.js.org/docs/en/plugin/plugin
const preParsePostFormat = function (option, dayjsClass) {
  var oldParse = dayjsClass.prototype.parse;
  dayjsClass.prototype.parse = function (cfg) {
    if (typeof cfg.date === 'string') {
      var locale = this.$locale();
      cfg.date = locale && locale.preparse ? locale.preparse(cfg.date) : cfg.date;
    } // original parse result

    return oldParse.bind(this)(cfg);
  }; // // overriding existing API
  // // e.g. extend dayjs().format()

  var oldFormat = dayjsClass.prototype.format;
  dayjsClass.prototype.format = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // original format result
    var result = oldFormat.call.apply(oldFormat, [this].concat(args)); // return modified result

    var locale = this.$locale();
    return locale && locale.postformat ? locale.postformat(result) : result;
  };
  var oldFromTo = dayjsClass.prototype.fromToBase;
  if (oldFromTo) {
    dayjsClass.prototype.fromToBase = function (input, withoutSuffix, instance, isFrom) {
      var locale = this.$locale() || instance.$locale(); // original format result

      return oldFromTo.call(this, input, withoutSuffix, instance, isFrom, locale && locale.postformat);
    };
  }
};
const updateLocale = function (option, Dayjs, dayjs) {
  dayjs.updateLocale = function (locale, customConfig) {
    var localeList = dayjs.Ls;
    var localeConfig = localeList[locale];
    if (!localeConfig) return;
    var customConfigKeys = customConfig ? Object.keys(customConfig) : [];
    customConfigKeys.forEach(function (c) {
      localeConfig[c] = customConfig[c];
    });
    return localeConfig; // eslint-disable-line consistent-return
  };
};

const inputTimePickerCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:inline-block;-webkit-user-select:none;user-select:none}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}::slotted(input[slot=hidden-form-input]){margin:0 !important;opacity:0 !important;outline:none !important;padding:0 !important;position:absolute !important;inset:0 !important;transform:none !important;-webkit-appearance:none !important;z-index:-1 !important}:host([scale=s]){--calcite-toggle-spacing:0.5rem;--calcite-internal-input-text-input-padding-inline-end:calc(var(--calcite-toggle-spacing) + 1rem)}:host([scale=m]){--calcite-toggle-spacing:0.75rem;--calcite-internal-input-text-input-padding-inline-end:calc(var(--calcite-toggle-spacing) + 1.5rem)}:host([scale=l]){--calcite-toggle-spacing:1rem;--calcite-internal-input-text-input-padding-inline-end:calc(var(--calcite-toggle-spacing) + 2rem)}.input-wrapper{position:relative}.toggle-icon{position:absolute;display:flex;cursor:pointer;align-items:center;inset-inline-end:0;inset-block:0;padding-inline:var(--calcite-toggle-spacing)}:host([hidden]){display:none}[hidden]{display:none}";

// some bundlers (e.g., Webpack) need dynamic import paths to be static
const supportedDayjsLocaleToLocaleConfigImport = new Map([["ar", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_ar_js").then(__webpack_require__.bind(__webpack_require__, /*! ./ar.js */ 22822))], ["bg", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_bg_js").then(__webpack_require__.bind(__webpack_require__, /*! ./bg.js */ 76238))], ["bs", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_bs_js").then(__webpack_require__.bind(__webpack_require__, /*! ./bs.js */ 34234))], ["ca", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_ca_js").then(__webpack_require__.bind(__webpack_require__, /*! ./ca.js */ 66643))], ["cs", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_cs_js").then(__webpack_require__.bind(__webpack_require__, /*! ./cs.js */ 91075))], ["da", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_da_js").then(__webpack_require__.bind(__webpack_require__, /*! ./da.js */ 39694))], ["de", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_de_js").then(__webpack_require__.bind(__webpack_require__, /*! ./de.js */ 1321))], ["de-at", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_de-at_js").then(__webpack_require__.bind(__webpack_require__, /*! ./de-at.js */ 85963))], ["de-ch", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_de-ch_js").then(__webpack_require__.bind(__webpack_require__, /*! ./de-ch.js */ 65690))], ["el", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_el_js").then(__webpack_require__.bind(__webpack_require__, /*! ./el.js */ 25845))], ["en", () => Promise.resolve().then(function () {
  return en$1;
})], ["en-au", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_en-au_js").then(__webpack_require__.bind(__webpack_require__, /*! ./en-au.js */ 63828))], ["en-ca", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_en-ca_js").then(__webpack_require__.bind(__webpack_require__, /*! ./en-ca.js */ 94681))], ["en-gb", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_en-gb_js").then(__webpack_require__.bind(__webpack_require__, /*! ./en-gb.js */ 61737))], ["es", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_es_js").then(__webpack_require__.bind(__webpack_require__, /*! ./es.js */ 25631))], ["es-mx", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_es-mx_js").then(__webpack_require__.bind(__webpack_require__, /*! ./es-mx.js */ 13038))], ["et", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_et_js").then(__webpack_require__.bind(__webpack_require__, /*! ./et.js */ 83639))], ["fi", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_fi_js").then(__webpack_require__.bind(__webpack_require__, /*! ./fi.js */ 1781))], ["fr", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_fr_js").then(__webpack_require__.bind(__webpack_require__, /*! ./fr.js */ 46593))], ["fr-ch", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_fr-ch_js").then(__webpack_require__.bind(__webpack_require__, /*! ./fr-ch.js */ 978))], ["he", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_he_js").then(__webpack_require__.bind(__webpack_require__, /*! ./he.js */ 81836))], ["hi", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_hi_js").then(__webpack_require__.bind(__webpack_require__, /*! ./hi.js */ 91125))], ["hr", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_hr_js").then(__webpack_require__.bind(__webpack_require__, /*! ./hr.js */ 27583))], ["hu", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_hu_js").then(__webpack_require__.bind(__webpack_require__, /*! ./hu.js */ 1152))], ["id", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_id_js").then(__webpack_require__.bind(__webpack_require__, /*! ./id.js */ 68906))], ["it", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_it_js").then(__webpack_require__.bind(__webpack_require__, /*! ./it.js */ 3938))], ["it-ch", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_it-ch_js").then(__webpack_require__.bind(__webpack_require__, /*! ./it-ch.js */ 44303))], ["ja", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_ja_js").then(__webpack_require__.bind(__webpack_require__, /*! ./ja.js */ 76223))], ["ko", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_ko_js").then(__webpack_require__.bind(__webpack_require__, /*! ./ko.js */ 77933))], ["lt", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_lt_js").then(__webpack_require__.bind(__webpack_require__, /*! ./lt.js */ 60338))], ["lv", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_lv_js").then(__webpack_require__.bind(__webpack_require__, /*! ./lv.js */ 75676))], ["mk", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_mk_js").then(__webpack_require__.bind(__webpack_require__, /*! ./mk.js */ 30306))], ["nl", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_nl_js").then(__webpack_require__.bind(__webpack_require__, /*! ./nl.js */ 41706))], ["nb", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_nb_js").then(__webpack_require__.bind(__webpack_require__, /*! ./nb.js */ 99550))], ["pl", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_pl_js").then(__webpack_require__.bind(__webpack_require__, /*! ./pl.js */ 45078))], ["pt", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_pt_js").then(__webpack_require__.bind(__webpack_require__, /*! ./pt.js */ 14869))], ["pt-br", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_pt-br_js").then(__webpack_require__.bind(__webpack_require__, /*! ./pt-br.js */ 17653))], ["ro", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_ro_js").then(__webpack_require__.bind(__webpack_require__, /*! ./ro.js */ 57326))], ["ru", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_ru_js").then(__webpack_require__.bind(__webpack_require__, /*! ./ru.js */ 47507))], ["sk", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_sk_js").then(__webpack_require__.bind(__webpack_require__, /*! ./sk.js */ 95524))], ["sl", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_sl_js").then(__webpack_require__.bind(__webpack_require__, /*! ./sl.js */ 83365))], ["sr", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_sr_js").then(__webpack_require__.bind(__webpack_require__, /*! ./sr.js */ 92830))], ["sv", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_sv_js").then(__webpack_require__.bind(__webpack_require__, /*! ./sv.js */ 16432))], ["th", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_th_js").then(__webpack_require__.bind(__webpack_require__, /*! ./th.js */ 51997))], ["tr", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_tr_js").then(__webpack_require__.bind(__webpack_require__, /*! ./tr.js */ 1001))], ["uk", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_uk_js").then(__webpack_require__.bind(__webpack_require__, /*! ./uk.js */ 98331))], ["vi", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_vi_js").then(__webpack_require__.bind(__webpack_require__, /*! ./vi.js */ 8563))], ["zh-cn", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_zh-cn_js").then(__webpack_require__.bind(__webpack_require__, /*! ./zh-cn.js */ 66434))], ["zh-hk", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_zh-hk_js").then(__webpack_require__.bind(__webpack_require__, /*! ./zh-hk.js */ 13446))], ["zh-tw", () => __webpack_require__.e(/*! import() */ "node_modules_esri_calcite-components_dist_components_zh-tw_js").then(__webpack_require__.bind(__webpack_require__, /*! ./zh-tw.js */ 77209))]]);
dayjs.extend(customParseFormat);
dayjs.extend(localeData);
dayjs.extend(localizedFormat);
dayjs.extend(preParsePostFormat);
dayjs.extend(updateLocale);
const InputTimePicker = /*@__PURE__*/(0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteInputTimePickerBeforeClose = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.createEvent)(this, "calciteInputTimePickerBeforeClose", 6);
    this.calciteInputTimePickerBeforeOpen = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.createEvent)(this, "calciteInputTimePickerBeforeOpen", 6);
    this.calciteInputTimePickerChange = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.createEvent)(this, "calciteInputTimePickerChange", 7);
    this.calciteInputTimePickerClose = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.createEvent)(this, "calciteInputTimePickerClose", 6);
    this.calciteInputTimePickerOpen = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.createEvent)(this, "calciteInputTimePickerOpen", 6);
    this.focusOnOpen = false;
    this.dialogId = `time-picker-dialog--${(0,_guid_js__WEBPACK_IMPORTED_MODULE_2__.g)()}`;
    /** whether the value of the input was changed as a result of user typing or not */
    this.userChangedValue = false;
    this.referenceElementId = `input-time-picker-${(0,_guid_js__WEBPACK_IMPORTED_MODULE_2__.g)()}`;
    this.openTransitionProp = "opacity";
    //--------------------------------------------------------------------------
    //
    //  Event Listeners
    //
    //--------------------------------------------------------------------------
    this.hostBlurHandler = () => {
      const inputValue = this.calciteInputEl.value;
      const delocalizedInputValue = this.delocalizeTimeString(inputValue);
      if (!delocalizedInputValue) {
        this.setValue("");
        return;
      }
      if (delocalizedInputValue !== this.value) {
        this.setValue(delocalizedInputValue);
      }
      const localizedTimeString = (0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.l)({
        value: this.value,
        locale: this.effectiveLocale,
        numberingSystem: this.numberingSystem,
        includeSeconds: this.shouldIncludeSeconds(),
        fractionalSecondDigits: (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step)
      });
      if (localizedTimeString !== inputValue) {
        this.setInputValue(localizedTimeString);
      }
      this.deactivate();
    };
    this.calciteInternalInputFocusHandler = event => {
      if (!this.readOnly) {
        event.stopPropagation();
      }
    };
    this.calciteInternalInputInputHandler = event => {
      const {
        effectiveLocale: locale,
        numberingSystem
      } = this;
      if (numberingSystem && numberingSystem !== "latn") {
        const target = event.target;
        _locale_js__WEBPACK_IMPORTED_MODULE_7__.n.numberFormatOptions = {
          locale,
          numberingSystem,
          useGrouping: false
        };
        const valueInNumberingSystem = _locale_js__WEBPACK_IMPORTED_MODULE_7__.n.delocalize(target.value).split("").map(char => _key_js__WEBPACK_IMPORTED_MODULE_4__.n.includes(char) ? _locale_js__WEBPACK_IMPORTED_MODULE_7__.n.numberFormatter.format(Number(char)) : char).join("");
        this.setInputValue(valueInNumberingSystem);
      }
    };
    this.timePickerChangeHandler = event => {
      event.stopPropagation();
      const target = event.target;
      const value = target.value;
      const includeSeconds = this.shouldIncludeSeconds();
      this.setValue((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.t)(value, includeSeconds));
      this.setInputValue((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.l)({
        value,
        locale: this.effectiveLocale,
        numberingSystem: this.numberingSystem,
        includeSeconds,
        fractionalSecondDigits: (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step)
      }));
    };
    this.popoverCloseHandler = () => {
      (0,_focusTrapComponent_js__WEBPACK_IMPORTED_MODULE_8__.d)(this, {
        onDeactivate: () => {
          this.calciteInputEl.setFocus();
          this.focusOnOpen = false;
        }
      });
      this.open = false;
    };
    this.popoverOpenHandler = () => {
      (0,_focusTrapComponent_js__WEBPACK_IMPORTED_MODULE_8__.a)(this, {
        onActivate: () => {
          if (this.focusOnOpen) {
            this.calciteTimePickerEl.setFocus();
            this.focusOnOpen = false;
          }
        }
      });
    };
    this.keyDownHandler = event => {
      const {
        defaultPrevented,
        key
      } = event;
      if (defaultPrevented) {
        return;
      }
      if (key === "Enter") {
        if ((0,_form_js__WEBPACK_IMPORTED_MODULE_1__.s)(this)) {
          event.preventDefault();
          this.calciteInputEl.setFocus();
        }
        if (event.composedPath().includes(this.calciteTimePickerEl)) {
          return;
        }
        const newValue = this.delocalizeTimeString(this.calciteInputEl.value);
        if ((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.i)(newValue)) {
          this.setValue(newValue);
          const localizedTimeString = (0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.l)({
            value: this.value,
            locale: this.effectiveLocale,
            numberingSystem: this.numberingSystem,
            includeSeconds: this.shouldIncludeSeconds(),
            fractionalSecondDigits: (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step)
          });
          if (newValue && this.calciteInputEl.value !== localizedTimeString) {
            this.setInputValue(localizedTimeString);
          }
        }
      } else if (key === "ArrowDown") {
        this.open = true;
        this.focusOnOpen = true;
        event.preventDefault();
      } else if (key === "Escape" && this.open) {
        this.open = false;
        event.preventDefault();
        this.calciteInputEl.setFocus();
      }
    };
    this.setCalcitePopoverEl = el => {
      this.popoverEl = el;
    };
    this.setInputAndTransitionEl = el => {
      this.calciteInputEl = el;
      this.transitionEl = el;
    };
    this.setCalciteTimePickerEl = el => {
      this.calciteTimePickerEl = el;
      (0,_focusTrapComponent_js__WEBPACK_IMPORTED_MODULE_8__.c)(this, {
        focusTrapEl: el,
        focusTrapOptions: {
          initialFocus: false,
          setReturnFocus: false
        }
      });
    };
    this.setInputValue = newInputValue => {
      if (!this.calciteInputEl) {
        return;
      }
      this.calciteInputEl.value = newInputValue;
    };
    /**
     * Sets the value and emits a change event.
     * This is used to update the value as a result of user interaction.
     *
     * @param value
     */
    this.setValue = value => {
      const oldValue = this.value;
      const newValue = (0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.f)(value) || "";
      if (newValue === oldValue) {
        return;
      }
      this.userChangedValue = true;
      this.value = newValue || "";
      const changeEvent = this.calciteInputTimePickerChange.emit();
      if (changeEvent.defaultPrevented) {
        this.userChangedValue = false;
        this.value = oldValue;
        this.setInputValue((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.l)({
          value: oldValue,
          locale: this.effectiveLocale,
          numberingSystem: this.numberingSystem,
          includeSeconds: this.shouldIncludeSeconds(),
          fractionalSecondDigits: (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step)
        }));
      }
    };
    /**
     * Sets the value directly without emitting a change event.
     * This is used to update the value on initial load and when props change that are not the result of user interaction.
     *
     * @param value
     */
    this.setValueDirectly = value => {
      const includeSeconds = this.shouldIncludeSeconds();
      this.value = (0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.t)(value, includeSeconds);
      this.setInputValue(this.value ? (0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.l)({
        value: this.value,
        includeSeconds,
        locale: this.effectiveLocale,
        numberingSystem: this.numberingSystem,
        fractionalSecondDigits: (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step)
      }) : "");
    };
    this.onInputWrapperClick = () => {
      this.open = !this.open;
    };
    this.deactivate = () => {
      this.open = false;
    };
    this.open = false;
    this.disabled = false;
    this.focusTrapDisabled = false;
    this.form = undefined;
    this.readOnly = false;
    this.messageOverrides = undefined;
    this.messages = undefined;
    this.name = undefined;
    this.numberingSystem = undefined;
    this.required = false;
    this.scale = "m";
    this.status = "idle";
    this.overlayPositioning = "absolute";
    this.placement = "auto";
    this.step = 60;
    this.value = null;
    this.defaultMessages = undefined;
    this.effectiveLocale = "";
  }
  openHandler(open) {
    (0,_openCloseComponent_js__WEBPACK_IMPORTED_MODULE_11__.o)(this);
    if (this.disabled || this.readOnly) {
      this.open = false;
      return;
    }
    if (open) {
      this.reposition(true);
    }
  }
  handleFocusTrapDisabled(focusTrapDisabled) {
    if (!this.open) {
      return;
    }
    focusTrapDisabled ? (0,_focusTrapComponent_js__WEBPACK_IMPORTED_MODULE_8__.d)(this) : (0,_focusTrapComponent_js__WEBPACK_IMPORTED_MODULE_8__.a)(this);
  }
  handleDisabledAndReadOnlyChange(value) {
    if (!value) {
      this.open = false;
    }
  }
  onMessagesChange() {
    /* wired up by t9n util */
  }
  numberingSystemWatcher(numberingSystem) {
    this.setInputValue((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.l)({
      value: this.value,
      locale: this.effectiveLocale,
      numberingSystem,
      includeSeconds: this.shouldIncludeSeconds(),
      fractionalSecondDigits: (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step)
    }));
  }
  stepWatcher(newStep, oldStep) {
    if (oldStep >= 60 && newStep > 0 && newStep < 60 || newStep >= 60 && oldStep > 0 && oldStep < 60) {
      this.setValueDirectly(this.value);
    }
  }
  valueWatcher(newValue) {
    if (!this.userChangedValue) {
      this.setValueDirectly(newValue);
    }
    this.userChangedValue = false;
  }
  effectiveLocaleWatcher(locale) {
    var _this5 = this;
    return (0,_home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _this5.loadDateTimeLocaleData();
      _this5.setInputValue((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.l)({
        value: _this5.value,
        locale,
        numberingSystem: _this5.numberingSystem,
        includeSeconds: _this5.shouldIncludeSeconds(),
        fractionalSecondDigits: (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(_this5.step)
      }));
    })();
  }
  // --------------------------------------------------------------------------
  //
  //  Public Methods
  //
  // --------------------------------------------------------------------------
  /** Sets focus on the component. */
  setFocus() {
    var _this6 = this;
    return (0,_home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.c)(_this6);
      _this6.el.focus();
    })();
  }
  /**
   * Updates the position of the component.
   *
   * @param delayed
   */
  reposition(delayed = false) {
    var _this7 = this;
    return (0,_home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this7.popoverEl?.reposition(delayed);
    })();
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  onBeforeOpen() {
    this.calciteInputTimePickerBeforeOpen.emit();
  }
  onOpen() {
    this.calciteInputTimePickerOpen.emit();
  }
  onBeforeClose() {
    this.calciteInputTimePickerBeforeClose.emit();
  }
  onClose() {
    this.calciteInputTimePickerClose.emit();
  }
  delocalizeTimeString(value) {
    // we need to set the corresponding locale before parsing, otherwise it defaults to English (possible dayjs bug)
    dayjs.locale(this.effectiveLocale.toLowerCase());
    const nonFractionalSecondParts = this.delocalizeTimeStringToParts(value);
    let delocalizedTimeString;
    if (this.shouldIncludeFractionalSeconds()) {
      const stepPrecision = (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step);
      const centisecondParts = this.delocalizeTimeStringToParts(value, "S");
      if (stepPrecision === 1) {
        delocalizedTimeString = centisecondParts.millisecond !== 0 ? this.getTimeStringFromParts(centisecondParts) : this.getTimeStringFromParts(nonFractionalSecondParts);
      } else {
        const decisecondParts = this.delocalizeTimeStringToParts(value, "SS");
        if (stepPrecision === 2) {
          if (decisecondParts.millisecond !== 0) {
            delocalizedTimeString = this.getTimeStringFromParts(decisecondParts);
          } else if (centisecondParts.millisecond !== 0) {
            delocalizedTimeString = this.getTimeStringFromParts(centisecondParts);
          } else {
            delocalizedTimeString = this.getTimeStringFromParts(nonFractionalSecondParts);
          }
        } else if (stepPrecision >= 3) {
          const millisecondParts = this.delocalizeTimeStringToParts(value, "SSS");
          if (millisecondParts.millisecond !== 0) {
            delocalizedTimeString = this.getTimeStringFromParts(millisecondParts);
          } else if (decisecondParts.millisecond !== 0) {
            delocalizedTimeString = this.getTimeStringFromParts(decisecondParts);
          } else if (centisecondParts.millisecond !== 0) {
            delocalizedTimeString = this.getTimeStringFromParts(centisecondParts);
          } else {
            delocalizedTimeString = this.getTimeStringFromParts(nonFractionalSecondParts);
          }
        }
      }
    } else {
      delocalizedTimeString = this.getTimeStringFromParts(nonFractionalSecondParts);
    }
    return delocalizedTimeString;
  }
  delocalizeTimeStringToParts(localizedTimeString, fractionalSecondFormatToken) {
    const ltsFormatString = this.localeConfig?.formats?.LTS;
    const fractionalSecondTokenMatch = ltsFormatString.match(/ss\.*(S+)/g);
    if (fractionalSecondFormatToken && this.shouldIncludeFractionalSeconds()) {
      const secondFormatToken = `ss.${fractionalSecondFormatToken}`;
      this.localeConfig.formats.LTS = fractionalSecondTokenMatch ? ltsFormatString.replace(fractionalSecondTokenMatch[0], secondFormatToken) : ltsFormatString.replace("ss", secondFormatToken);
    } else if (fractionalSecondTokenMatch) {
      this.localeConfig.formats.LTS = ltsFormatString.replace(fractionalSecondTokenMatch[0], "ss");
    }
    dayjs.updateLocale(this.getSupportedDayjsLocale((0,_locale_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.effectiveLocale)), this.localeConfig);
    const dayjsParseResult = dayjs(localizedTimeString, ["LTS", "LT"]);
    if (dayjsParseResult.isValid()) {
      return {
        hour: dayjsParseResult.get("hour"),
        minute: dayjsParseResult.get("minute"),
        second: dayjsParseResult.get("second"),
        millisecond: dayjsParseResult.get("millisecond")
      };
    }
    return {
      hour: null,
      minute: null,
      second: null,
      millisecond: null
    };
  }
  getTimeStringFromParts(parts) {
    let timeString = "";
    if (!parts) {
      return timeString;
    }
    if (parts.hour !== null && parts.minute !== null) {
      timeString = `${(0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.a)(parts.hour)}:${(0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.a)(parts.minute)}`;
      if (this.shouldIncludeSeconds() && parts.second !== null) {
        timeString += `:${(0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.a)(parts.second)}`;
        if (this.shouldIncludeFractionalSeconds() && parts.millisecond !== null) {
          const second = (parts.millisecond * 0.001).toFixed((0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step));
          timeString += `.${second.toString().replace("0.", "")}`;
        }
      }
    }
    return timeString;
  }
  getSupportedDayjsLocale(locale) {
    const dayjsLocale = locale.toLowerCase();
    if (dayjsLocale === "no") {
      return "nb";
    }
    if (dayjsLocale === "pt-pt") {
      return "pt";
    }
    return dayjsLocale;
  }
  loadDateTimeLocaleData() {
    var _this8 = this;
    return (0,_home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      let supportedLocale = (0,_locale_js__WEBPACK_IMPORTED_MODULE_7__.g)(_this8.effectiveLocale).toLowerCase();
      supportedLocale = _this8.getSupportedDayjsLocale(supportedLocale);
      const {
        default: localeConfig
      } = yield supportedDayjsLocaleToLocaleConfigImport.get(supportedLocale)();
      _this8.localeConfig = localeConfig;
      dayjs.locale(_this8.localeConfig, null, true);
      dayjs.updateLocale(supportedLocale, _this8.getExtendedLocaleConfig(supportedLocale));
    })();
  }
  getExtendedLocaleConfig(locale) {
    if (locale === "ar") {
      return {
        meridiem: hour => hour > 12 ? "م" : "ص",
        formats: {
          LT: "HH:mm A",
          LTS: "HH:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm A",
          LLLL: "dddd D MMMM YYYY HH:mm A"
        }
      };
    }
    if (locale === "en-au") {
      return {
        meridiem: hour => hour > 12 ? "pm" : "am"
      };
    }
    if (locale === "en-ca") {
      return {
        meridiem: hour => hour > 12 ? "p.m." : "a.m."
      };
    }
    if (locale === "el") {
      return {
        meridiem: hour => hour > 12 ? "μ.μ." : "π.μ."
      };
    }
    if (locale === "hi") {
      return {
        formats: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, h:mm A",
          LLLL: "dddd, D MMMM YYYY, h:mm A"
        },
        meridiem: hour => hour > 12 ? "pm" : "am"
      };
    }
    if (locale === "ko") {
      return {
        meridiem: hour => hour > 12 ? "오후" : "오전"
      };
    }
    if (locale === "zh-tw") {
      return {
        formats: {
          LT: "AHH:mm",
          LTS: "AHH:mm:ss"
        }
      };
    }
    if (locale === "zh-hk") {
      return {
        formats: {
          LT: "AHH:mm",
          LTS: "AHH:mm:ss"
        },
        meridiem: hour => hour > 12 ? "下午" : "上午"
      };
    }
  }
  onLabelClick() {
    this.setFocus();
  }
  shouldIncludeSeconds() {
    return this.step < 60;
  }
  shouldIncludeFractionalSeconds() {
    return (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step) > 0;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_3__.c)(this);
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_7__.c)(this);
    if ((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.i)(this.value)) {
      this.setValueDirectly(this.value);
    } else {
      this.value = undefined;
    }
    (0,_label2_js__WEBPACK_IMPORTED_MODULE_5__.c)(this);
    (0,_form_js__WEBPACK_IMPORTED_MODULE_1__.c)(this);
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_10__.c)(this);
  }
  componentWillLoad() {
    var _this9 = this;
    return (0,_home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.a)(_this9);
      yield Promise.all([(0,_t9n_js__WEBPACK_IMPORTED_MODULE_10__.s)(_this9), _this9.loadDateTimeLocaleData()]);
      if (_this9.open) {
        (0,_openCloseComponent_js__WEBPACK_IMPORTED_MODULE_11__.o)(_this9);
      }
    })();
  }
  componentDidLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.s)(this);
    if ((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.i)(this.value)) {
      this.setInputValue((0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.l)({
        value: this.value,
        locale: this.effectiveLocale,
        numberingSystem: this.numberingSystem,
        includeSeconds: this.shouldIncludeSeconds(),
        fractionalSecondDigits: (0,_math_js__WEBPACK_IMPORTED_MODULE_12__.d)(this.step)
      }));
    }
  }
  disconnectedCallback() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_3__.d)(this);
    (0,_label2_js__WEBPACK_IMPORTED_MODULE_5__.d)(this);
    (0,_form_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_7__.d)(this);
    (0,_focusTrapComponent_js__WEBPACK_IMPORTED_MODULE_8__.d)(this);
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_10__.d)(this);
  }
  componentDidRender() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_3__.u)(this);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  render() {
    const {
      disabled,
      messages,
      readOnly,
      dialogId
    } = this;
    return (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.h)(_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.Host, {
      onBlur: this.hostBlurHandler,
      onKeyDown: this.keyDownHandler
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.h)("div", {
      class: "input-wrapper",
      onClick: this.onInputWrapperClick
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.h)("calcite-input-text", {
      "aria-autocomplete": "none",
      "aria-haspopup": "dialog",
      disabled: disabled,
      icon: "clock",
      id: this.referenceElementId,
      label: (0,_label2_js__WEBPACK_IMPORTED_MODULE_5__.g)(this),
      lang: this.effectiveLocale,
      onCalciteInputTextInput: this.calciteInternalInputInputHandler,
      onCalciteInternalInputTextFocus: this.calciteInternalInputFocusHandler,
      readOnly: readOnly,
      role: "combobox",
      scale: this.scale,
      status: this.status,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setInputAndTransitionEl
    }), !this.readOnly && this.renderToggleIcon(this.open)), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.h)("calcite-popover", {
      focusTrapDisabled: true,
      id: dialogId,
      label: messages.chooseTime,
      lang: this.effectiveLocale,
      onCalcitePopoverClose: this.popoverCloseHandler,
      onCalcitePopoverOpen: this.popoverOpenHandler,
      open: this.open,
      overlayPositioning: this.overlayPositioning,
      placement: this.placement,
      referenceElement: this.referenceElementId,
      triggerDisabled: true,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setCalcitePopoverEl
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.h)("calcite-time-picker", {
      lang: this.effectiveLocale,
      messageOverrides: this.messageOverrides,
      numberingSystem: this.numberingSystem,
      onCalciteInternalTimePickerChange: this.timePickerChangeHandler,
      scale: this.scale,
      step: this.step,
      tabIndex: this.open ? undefined : -1,
      value: this.value,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setCalciteTimePickerEl
    })), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.h)(_form_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      component: this
    }));
  }
  renderToggleIcon(open) {
    return (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.h)("span", {
      class: CSS.toggleIcon
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_20__.h)("calcite-icon", {
      icon: open ? "chevron-up" : "chevron-down",
      scale: (0,_component_js__WEBPACK_IMPORTED_MODULE_13__.g)(this.scale)
    }));
  }
  static get delegatesFocus() {
    return true;
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return this;
  }
  static get watchers() {
    return {
      "open": ["openHandler"],
      "focusTrapDisabled": ["handleFocusTrapDisabled"],
      "disabled": ["handleDisabledAndReadOnlyChange"],
      "readOnly": ["handleDisabledAndReadOnlyChange"],
      "messageOverrides": ["onMessagesChange"],
      "numberingSystem": ["numberingSystemWatcher"],
      "step": ["stepWatcher"],
      "value": ["valueWatcher"],
      "effectiveLocale": ["effectiveLocaleWatcher"]
    };
  }
  static get style() {
    return inputTimePickerCss;
  }
}, [17, "calcite-input-time-picker", {
  "open": [1540],
  "disabled": [516],
  "focusTrapDisabled": [516, "focus-trap-disabled"],
  "form": [513],
  "readOnly": [516, "read-only"],
  "messageOverrides": [1040],
  "messages": [1040],
  "name": [1],
  "numberingSystem": [1, "numbering-system"],
  "required": [516],
  "scale": [513],
  "status": [513],
  "overlayPositioning": [1, "overlay-positioning"],
  "placement": [513],
  "step": [2],
  "value": [1025],
  "defaultMessages": [32],
  "effectiveLocale": [32],
  "setFocus": [64],
  "reposition": [64]
}]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-input-time-picker", "calcite-action", "calcite-icon", "calcite-input-text", "calcite-loader", "calcite-popover", "calcite-progress", "calcite-time-picker"];
  components.forEach(tagName => {
    switch (tagName) {
      case "calcite-input-time-picker":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, InputTimePicker);
        }
        break;
      case "calcite-action":
        if (!customElements.get(tagName)) {
          (0,_action_js__WEBPACK_IMPORTED_MODULE_14__.d)();
        }
        break;
      case "calcite-icon":
        if (!customElements.get(tagName)) {
          (0,_icon_js__WEBPACK_IMPORTED_MODULE_15__.d)();
        }
        break;
      case "calcite-input-text":
        if (!customElements.get(tagName)) {
          (0,_input_text_js__WEBPACK_IMPORTED_MODULE_16__.d)();
        }
        break;
      case "calcite-loader":
        if (!customElements.get(tagName)) {
          (0,_loader_js__WEBPACK_IMPORTED_MODULE_17__.d)();
        }
        break;
      case "calcite-popover":
        if (!customElements.get(tagName)) {
          (0,_popover_js__WEBPACK_IMPORTED_MODULE_18__.d)();
        }
        break;
      case "calcite-progress":
        if (!customElements.get(tagName)) {
          (0,_progress_js__WEBPACK_IMPORTED_MODULE_19__.d)();
        }
        break;
      case "calcite-time-picker":
        if (!customElements.get(tagName)) {
          (0,_time_picker_js__WEBPACK_IMPORTED_MODULE_9__.d)();
        }
        break;
    }
  });
}
defineCustomElement$1();
const CalciteInputTimePicker = InputTimePicker;
const defineCustomElement = defineCustomElement$1;


/***/ }),

/***/ 75104:
/*!***********************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/components/math.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ closeToRangeEdge),
/* harmony export */   "c": () => (/* binding */ clamp),
/* harmony export */   "d": () => (/* binding */ decimalPlaces),
/* harmony export */   "g": () => (/* binding */ getDecimals),
/* harmony export */   "r": () => (/* binding */ remap)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */
const clamp = (value, min, max) => Math.max(min, Math.min(value, max));
const decimalNumberRegex = new RegExp(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
/**
 * Returns the quantity of real decimal places for a number, which excludes trailing zeros.
 *
 * Adapted from {@link https://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number}.
 *
 * @param decimal - decimal value
 * @param value
 * @returns {number} the amount of decimal places in a number
 */
const decimalPlaces = value => {
  const match = ("" + value).match(decimalNumberRegex);
  if (!match || parseInt(match[1]) === 0) {
    return 0;
  }
  return Math.max(0,
  // Number of digits right of decimal point.
  (match[1] ? match[1].length : 0) - (
  // Adjust for scientific notation.
  match[2] ? +match[2] : 0));
};
function getDecimals(value) {
  if (decimalPlaces(value) > 0 && value > 0) {
    return parseFloat(`0.${value.toString().split(".")[1]}`);
  }
  return value;
}
function remap(value, fromMin, fromMax, toMin, toMax) {
  return (value - fromMin) * (toMax - toMin) / (fromMax - fromMin) + toMin;
}
/**
 * Helper to determine if a value is close to the edge of a range within a threshold.
 *
 * @param value
 * @param range
 * @param threshold
 * @returns -1 if close to lower edge, 1 if close to upper edge, 0 otherwise.
 */
function closeToRangeEdge(value, range, threshold) {
  return value < threshold ? -1 : value > range - threshold ? 1 : 0;
}


/***/ }),

/***/ 55734:
/*!******************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/components/time-picker.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": () => (/* binding */ TimePicker),
/* harmony export */   "a": () => (/* binding */ formatTimePart),
/* harmony export */   "d": () => (/* binding */ defineCustomElement),
/* harmony export */   "f": () => (/* binding */ formatTimeString),
/* harmony export */   "i": () => (/* binding */ isValidTime),
/* harmony export */   "l": () => (/* binding */ localizeTimeString),
/* harmony export */   "t": () => (/* binding */ toISOTimeString)
/* harmony export */ });
/* harmony import */ var _home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ 40994);
/* harmony import */ var _key_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./key.js */ 78407);
/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./locale.js */ 9333);
/* harmony import */ var _t9n_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./t9n.js */ 75301);
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./math.js */ 75104);
/* harmony import */ var _component_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./component.js */ 90662);
/* harmony import */ var _loadable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadable.js */ 80483);
/* harmony import */ var _icon_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./icon.js */ 2706);

/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.11.0
 */








const maxTenthForMinuteAndSecond = 5;
function createLocaleDateTimeFormatter(locale, numberingSystem, includeSeconds = true, fractionalSecondDigits) {
  const options = {
    hour: "2-digit",
    minute: "2-digit",
    timeZone: "UTC",
    numberingSystem: (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.f)(numberingSystem)
  };
  if (includeSeconds) {
    options.second = "2-digit";
    if (fractionalSecondDigits) {
      options.fractionalSecondDigits = fractionalSecondDigits;
    }
  }
  return (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.b)(locale, options);
}
function formatTimePart(number, minLength) {
  if (number === null || number === undefined) {
    return;
  }
  const numberAsString = number.toString();
  const numberDecimalPlaces = (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(number);
  if (number < 1 && numberDecimalPlaces > 0 && numberDecimalPlaces < 4) {
    const fractionalDigits = numberAsString.replace("0.", "");
    if (!minLength || fractionalDigits.length === minLength) {
      return fractionalDigits;
    }
    if (fractionalDigits.length < minLength) {
      return fractionalDigits.padEnd(minLength, "0");
    }
    return fractionalDigits;
  }
  if (number >= 0 && number < 10) {
    return numberAsString.padStart(2, "0");
  }
  if (number >= 10) {
    return numberAsString;
  }
}
function formatTimeString(value) {
  if (!isValidTime(value)) {
    return null;
  }
  const {
    hour,
    minute,
    second,
    fractionalSecond
  } = parseTimeString(value);
  let formattedValue = `${formatTimePart(parseInt(hour))}:${formatTimePart(parseInt(minute))}`;
  if (second) {
    formattedValue += `:${formatTimePart(parseInt(second))}`;
    if (fractionalSecond) {
      formattedValue += `.${fractionalSecond}`;
    }
  }
  return formattedValue;
}
function fractionalSecondPartToMilliseconds(fractionalSecondPart) {
  return parseInt((parseFloat(`0.${fractionalSecondPart}`) / 0.001).toFixed(3));
}
function getLocaleHourCycle(locale, numberingSystem) {
  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);
  const parts = formatter.formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));
  return getLocalizedTimePart("meridiem", parts) ? "12" : "24";
}
function getLocalizedDecimalSeparator(locale, numberingSystem) {
  _locale_js__WEBPACK_IMPORTED_MODULE_2__.n.numberFormatOptions = {
    locale,
    numberingSystem
  };
  return _locale_js__WEBPACK_IMPORTED_MODULE_2__.n.localize("1.1").split("")[1];
}
function getLocalizedTimePartSuffix(part, locale, numberingSystem = "latn") {
  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);
  const parts = formatter.formatToParts(new Date(Date.UTC(0, 0, 0, 0, 0, 0)));
  return getLocalizedTimePart(`${part}Suffix`, parts);
}
function getLocalizedTimePart(part, parts) {
  if (!part || !parts) {
    return null;
  }
  if (part === "hourSuffix") {
    const hourIndex = parts.indexOf(parts.find(({
      type
    }) => type === "hour"));
    const minuteIndex = parts.indexOf(parts.find(({
      type
    }) => type === "minute"));
    const hourSuffix = parts[hourIndex + 1];
    return hourSuffix && hourSuffix.type === "literal" && minuteIndex - hourIndex === 2 ? hourSuffix.value?.trim() || null : null;
  }
  if (part === "minuteSuffix") {
    const minuteIndex = parts.indexOf(parts.find(({
      type
    }) => type === "minute"));
    const secondIndex = parts.indexOf(parts.find(({
      type
    }) => type === "second"));
    const minuteSuffix = parts[minuteIndex + 1];
    return minuteSuffix && minuteSuffix.type === "literal" && secondIndex - minuteIndex === 2 ? minuteSuffix.value?.trim() || null : null;
  }
  if (part === "secondSuffix") {
    const secondIndex = parts.indexOf(parts.find(({
      type
    }) => type === "second"));
    const secondSuffix = parts[secondIndex + 1];
    return secondSuffix && secondSuffix.type === "literal" ? secondSuffix.value?.trim() || null : null;
  }
  return parts.find(({
    type
  }) => part == "meridiem" ? type === "dayPeriod" : type === part)?.value || null;
}
function getMeridiem(hour) {
  if (!(0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(hour)) {
    return null;
  }
  const hourAsNumber = parseInt(hour);
  return hourAsNumber >= 0 && hourAsNumber <= 11 ? "AM" : "PM";
}
function isValidTime(value) {
  if (!value || value.startsWith(":") || value.endsWith(":")) {
    return false;
  }
  const splitValue = value.split(":");
  const validLength = splitValue.length > 1 && splitValue.length < 4;
  if (!validLength) {
    return false;
  }
  const [hour, minute, second] = splitValue;
  const hourAsNumber = parseInt(splitValue[0]);
  const minuteAsNumber = parseInt(splitValue[1]);
  const secondAsNumber = parseInt(splitValue[2]);
  const hourValid = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(hour) && hourAsNumber >= 0 && hourAsNumber < 24;
  const minuteValid = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(minute) && minuteAsNumber >= 0 && minuteAsNumber < 60;
  const secondValid = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(second) && secondAsNumber >= 0 && secondAsNumber < 60;
  if (hourValid && minuteValid && !second || hourValid && minuteValid && secondValid) {
    return true;
  }
}
function isValidTimePart(value, part) {
  if (part === "meridiem") {
    return value === "AM" || value === "PM";
  }
  if (!(0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(value)) {
    return false;
  }
  const valueAsNumber = Number(value);
  return part === "hour" ? valueAsNumber >= 0 && valueAsNumber < 24 : valueAsNumber >= 0 && valueAsNumber < 60;
}
function localizeTimePart({
  value,
  part,
  locale,
  numberingSystem
}) {
  if (part === "fractionalSecond") {
    const localizedDecimalSeparator = getLocalizedDecimalSeparator(locale, numberingSystem);
    let localizedFractionalSecond = null;
    if (value) {
      _locale_js__WEBPACK_IMPORTED_MODULE_2__.n.numberFormatOptions = {
        locale,
        numberingSystem
      };
      const localizedZero = _locale_js__WEBPACK_IMPORTED_MODULE_2__.n.localize("0");
      if (parseInt(value) === 0) {
        localizedFractionalSecond = "".padStart(value.length, localizedZero);
      } else {
        localizedFractionalSecond = _locale_js__WEBPACK_IMPORTED_MODULE_2__.n.localize(`0.${value}`).replace(`${localizedZero}${localizedDecimalSeparator}`, "");
        if (localizedFractionalSecond.length < value.length) {
          localizedFractionalSecond = localizedFractionalSecond.padEnd(value.length, localizedZero);
        }
      }
    }
    return localizedFractionalSecond;
  }
  if (!isValidTimePart(value, part)) {
    return;
  }
  const valueAsNumber = parseInt(value);
  const date = new Date(Date.UTC(0, 0, 0, part === "hour" ? valueAsNumber : part === "meridiem" ? value === "AM" ? 0 : 12 : 0, part === "minute" ? valueAsNumber : 0, part === "second" ? valueAsNumber : 0));
  if (!date) {
    return;
  }
  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);
  const parts = formatter.formatToParts(date);
  return getLocalizedTimePart(part, parts);
}
function localizeTimeString({
  value,
  locale,
  numberingSystem,
  includeSeconds = true,
  fractionalSecondDigits
}) {
  if (!isValidTime(value)) {
    return null;
  }
  const {
    hour,
    minute,
    second = "0",
    fractionalSecond
  } = parseTimeString(value);
  const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second), fractionalSecond && fractionalSecondPartToMilliseconds(fractionalSecond)));
  const formatter = createLocaleDateTimeFormatter(locale, numberingSystem, includeSeconds, fractionalSecondDigits);
  return formatter.format(dateFromTimeString) || null;
}
function localizeTimeStringToParts({
  value,
  locale,
  numberingSystem = "latn"
}) {
  if (!isValidTime(value)) {
    return null;
  }
  const {
    hour,
    minute,
    second = "0",
    fractionalSecond
  } = parseTimeString(value);
  const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));
  if (dateFromTimeString) {
    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);
    const parts = formatter.formatToParts(dateFromTimeString);
    return {
      localizedHour: getLocalizedTimePart("hour", parts),
      localizedHourSuffix: getLocalizedTimePart("hourSuffix", parts),
      localizedMinute: getLocalizedTimePart("minute", parts),
      localizedMinuteSuffix: getLocalizedTimePart("minuteSuffix", parts),
      localizedSecond: getLocalizedTimePart("second", parts),
      localizedDecimalSeparator: getLocalizedDecimalSeparator(locale, numberingSystem),
      localizedFractionalSecond: localizeTimePart({
        value: fractionalSecond,
        part: "fractionalSecond",
        locale,
        numberingSystem
      }),
      localizedSecondSuffix: getLocalizedTimePart("secondSuffix", parts),
      localizedMeridiem: getLocalizedTimePart("meridiem", parts)
    };
  }
  return null;
}
function getTimeParts({
  value,
  locale,
  numberingSystem
}) {
  if (!isValidTime(value)) {
    return null;
  }
  const {
    hour,
    minute,
    second = "0"
  } = parseTimeString(value);
  const dateFromTimeString = new Date(Date.UTC(0, 0, 0, parseInt(hour), parseInt(minute), parseInt(second)));
  if (dateFromTimeString) {
    const formatter = createLocaleDateTimeFormatter(locale, numberingSystem);
    const parts = formatter.formatToParts(dateFromTimeString);
    return parts;
  }
  return null;
}
function parseTimeString(value) {
  if (isValidTime(value)) {
    const [hour, minute, secondDecimal] = value.split(":");
    let second = secondDecimal;
    let fractionalSecond = null;
    if (secondDecimal?.includes(".")) {
      [second, fractionalSecond] = secondDecimal.split(".");
    }
    return {
      fractionalSecond,
      hour,
      minute,
      second
    };
  }
  return {
    fractionalSecond: null,
    hour: null,
    minute: null,
    second: null
  };
}
function toISOTimeString(value, includeSeconds = true) {
  if (!isValidTime(value)) {
    return "";
  }
  const {
    hour,
    minute,
    second,
    fractionalSecond
  } = parseTimeString(value);
  let isoTimeString = `${formatTimePart(parseInt(hour))}:${formatTimePart(parseInt(minute))}`;
  if (includeSeconds) {
    isoTimeString += `:${formatTimePart(parseInt(includeSeconds && second || "0"))}`;
    if (fractionalSecond) {
      isoTimeString += `.${fractionalSecond}`;
    }
  }
  return isoTimeString;
}
const CSS = {
  button: "button",
  buttonBottomLeft: "button--bottom-left",
  buttonBottomRight: "button--bottom-right",
  buttonFractionalSecondDown: "button--fractionalSecond-down",
  buttonFractionalSecondUp: "button--fractionalSecond-up",
  buttonHourDown: "button--hour-down",
  buttonHourUp: "button--hour-up",
  buttonMeridiemDown: "button--meridiem-down",
  buttonMeridiemUp: "button--meridiem-up",
  buttonMinuteDown: "button--minute-down",
  buttonMinuteUp: "button--minute-up",
  buttonSecondDown: "button--second-down",
  buttonSecondUp: "button--second-up",
  buttonTopLeft: "button--top-left",
  buttonTopRight: "button--top-right",
  column: "column",
  delimiter: "delimiter",
  fractionalSecond: "fractionalSecond",
  hour: "hour",
  input: "input",
  inputFocus: "inputFocus",
  meridiem: "meridiem",
  minute: "minute",
  second: "second",
  showMeridiem: "show-meridiem",
  showSecond: "show-second",
  "scale-s": "scale-s",
  "scale-m": "scale-m",
  "scale-l": "scale-l",
  timePicker: "time-picker",
  meridiemStart: "meridiem--start"
};
const timePickerCss = ":host{display:inline-block}.time-picker{display:flex;-webkit-user-select:none;user-select:none;align-items:center;background-color:var(--calcite-ui-foreground-1);font-weight:var(--calcite-font-weight-medium);color:var(--calcite-ui-text-1);--tw-shadow:0 6px 20px -4px rgba(0, 0, 0, 0.1), 0 4px 12px -2px rgba(0, 0, 0, 0.08);--tw-shadow-colored:0 6px 20px -4px var(--tw-shadow-color), 0 4px 12px -2px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);border-radius:var(--calcite-border-radius)}.time-picker .column{display:flex;flex-direction:column}.time-picker .meridiem--start{order:-1}.time-picker .button{display:inline-flex;cursor:pointer;align-items:center;justify-content:center;background-color:var(--calcite-ui-foreground-1)}.time-picker .button:hover,.time-picker .button:focus{background-color:var(--calcite-ui-foreground-2);outline:2px solid transparent;outline-offset:2px;z-index:var(--calcite-app-z-index-header);outline-offset:0}.time-picker .button:active{background-color:var(--calcite-ui-foreground-3)}.time-picker .button.top-left{border-start-start-radius:var(--calcite-border-radius)}.time-picker .button.bottom-left{border-end-start-radius:var(--calcite-border-radius)}.time-picker .button.top-right{border-start-end-radius:var(--calcite-border-radius)}.time-picker .button.bottom-right{border-end-end-radius:var(--calcite-border-radius)}.time-picker .button calcite-icon{color:var(--calcite-ui-text-3)}.time-picker .input{display:inline-flex;cursor:pointer;align-items:center;justify-content:center;background-color:var(--calcite-ui-foreground-1);font-weight:var(--calcite-font-weight-medium)}.time-picker .input:hover{box-shadow:inset 0 0 0 2px var(--calcite-ui-foreground-2);z-index:var(--calcite-app-z-index-header)}.time-picker .input:focus,.time-picker .input:hover:focus{outline:2px solid transparent;outline-offset:2px;outline-offset:0}.time-picker .input.inputFocus,.time-picker .input:hover.inputFocus{box-shadow:inset 0 0 0 2px var(--calcite-ui-brand);z-index:var(--calcite-app-z-index-header)}.time-picker.scale-s{font-size:var(--calcite-font-size--1)}.time-picker.scale-s .button,.time-picker.scale-s .input{padding-inline:0.75rem;padding-block:0.25rem}.time-picker.scale-s:not(.show-meridiem) .delimiter:last-child{padding-inline-end:0.75rem}.time-picker.scale-m{font-size:var(--calcite-font-size-0)}.time-picker.scale-m .button,.time-picker.scale-m .input{padding-inline:1rem;padding-block:0.5rem}.time-picker.scale-m:not(.show-meridiem) .delimiter:last-child{padding-inline-end:1rem}.time-picker.scale-l{font-size:var(--calcite-font-size-1)}.time-picker.scale-l .button,.time-picker.scale-l .input{padding-inline:1.25rem;padding-block:0.75rem}.time-picker.scale-l:not(.show-meridiem) .delimiter:last-child{padding-inline-end:1.25rem}:host([hidden]){display:none}[hidden]{display:none}";
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
const TimePicker = /*@__PURE__*/(0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteInternalTimePickerBlur = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.createEvent)(this, "calciteInternalTimePickerBlur", 6);
    this.calciteInternalTimePickerChange = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.createEvent)(this, "calciteInternalTimePickerChange", 6);
    this.calciteInternalTimePickerFocus = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.createEvent)(this, "calciteInternalTimePickerFocus", 6);
    this.pointerActivated = false;
    this.decrementHour = () => {
      const newHour = !this.hour ? 0 : this.hour === "00" ? 23 : parseInt(this.hour) - 1;
      this.setValuePart("hour", newHour);
    };
    this.decrementMeridiem = () => {
      const newMeridiem = this.meridiem === "PM" ? "AM" : "PM";
      this.setValuePart("meridiem", newMeridiem);
    };
    this.decrementMinuteOrSecond = key => {
      let newValue;
      if ((0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this[key])) {
        const valueAsNumber = parseInt(this[key]);
        newValue = valueAsNumber === 0 ? 59 : valueAsNumber - 1;
      } else {
        newValue = 59;
      }
      this.setValuePart(key, newValue);
    };
    this.decrementMinute = () => {
      this.decrementMinuteOrSecond("minute");
    };
    this.decrementSecond = () => {
      this.decrementMinuteOrSecond("second");
    };
    this.focusHandler = event => {
      if (this.pointerActivated) {
        return;
      }
      this.activeEl = event.currentTarget;
    };
    this.fractionalSecondKeyDownHandler = event => {
      const {
        key
      } = event;
      if (_key_js__WEBPACK_IMPORTED_MODULE_1__.n.includes(key)) {
        const stepPrecision = (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.step);
        const fractionalSecondAsInteger = parseInt(this.fractionalSecond);
        const fractionalSecondAsIntegerLength = fractionalSecondAsInteger.toString().length;
        let newFractionalSecondAsIntegerString;
        if (fractionalSecondAsIntegerLength >= stepPrecision) {
          newFractionalSecondAsIntegerString = key.padStart(stepPrecision, "0");
        } else if (fractionalSecondAsIntegerLength < stepPrecision) {
          newFractionalSecondAsIntegerString = `${fractionalSecondAsInteger}${key}`.padStart(stepPrecision, "0");
        }
        this.setValuePart("fractionalSecond", parseFloat(`0.${newFractionalSecondAsIntegerString}`));
      } else {
        switch (key) {
          case "Backspace":
          case "Delete":
            this.setValuePart("fractionalSecond", null);
            break;
          case "ArrowDown":
            event.preventDefault();
            this.nudgeFractionalSecond("down");
            break;
          case "ArrowUp":
            event.preventDefault();
            this.nudgeFractionalSecond("up");
            break;
          case " ":
            event.preventDefault();
            break;
        }
      }
    };
    this.fractionalSecondDownClickHandler = () => {
      this.activeEl = this.fractionalSecondEl;
      this.fractionalSecondEl.focus();
      this.nudgeFractionalSecond("down");
    };
    this.fractionalSecondUpClickHandler = () => {
      this.activeEl = this.fractionalSecondEl;
      this.fractionalSecondEl.focus();
      this.nudgeFractionalSecond("up");
    };
    this.hourDownClickHandler = () => {
      this.activeEl = this.hourEl;
      this.hourEl.focus();
      this.decrementHour();
    };
    this.hourKeyDownHandler = event => {
      const {
        key
      } = event;
      if (_key_js__WEBPACK_IMPORTED_MODULE_1__.n.includes(key)) {
        const keyAsNumber = parseInt(key);
        let newHour;
        if ((0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.hour)) {
          switch (this.hourCycle) {
            case "12":
              newHour = this.hour === "01" && keyAsNumber >= 0 && keyAsNumber <= 2 ? `1${keyAsNumber}` : keyAsNumber;
              break;
            case "24":
              if (this.hour === "01") {
                newHour = `1${keyAsNumber}`;
              } else if (this.hour === "02" && keyAsNumber >= 0 && keyAsNumber <= 3) {
                newHour = `2${keyAsNumber}`;
              } else {
                newHour = keyAsNumber;
              }
              break;
          }
        } else {
          newHour = keyAsNumber;
        }
        this.setValuePart("hour", newHour);
      } else {
        switch (key) {
          case "Backspace":
          case "Delete":
            this.setValuePart("hour", null);
            break;
          case "ArrowDown":
            event.preventDefault();
            this.decrementHour();
            break;
          case "ArrowUp":
            event.preventDefault();
            this.incrementHour();
            break;
          case " ":
            event.preventDefault();
            break;
        }
      }
    };
    this.hourUpClickHandler = () => {
      this.activeEl = this.hourEl;
      this.hourEl.focus();
      this.incrementHour();
    };
    this.incrementMeridiem = () => {
      const newMeridiem = this.meridiem === "AM" ? "PM" : "AM";
      this.setValuePart("meridiem", newMeridiem);
    };
    this.incrementHour = () => {
      const newHour = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.hour) ? this.hour === "23" ? 0 : parseInt(this.hour) + 1 : 1;
      this.setValuePart("hour", newHour);
    };
    this.incrementMinuteOrSecond = key => {
      const newValue = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this[key]) ? this[key] === "59" ? 0 : parseInt(this[key]) + 1 : 0;
      this.setValuePart(key, newValue);
    };
    this.incrementMinute = () => {
      this.incrementMinuteOrSecond("minute");
    };
    this.incrementSecond = () => {
      this.incrementMinuteOrSecond("second");
    };
    this.inputClickHandler = event => {
      this.activeEl = event.target;
    };
    this.meridiemUpClickHandler = () => {
      this.activeEl = this.meridiemEl;
      this.meridiemEl.focus();
      this.incrementMeridiem();
    };
    this.meridiemKeyDownHandler = event => {
      switch (event.key) {
        case "a":
          this.setValuePart("meridiem", "AM");
          break;
        case "p":
          this.setValuePart("meridiem", "PM");
          break;
        case "Backspace":
        case "Delete":
          this.setValuePart("meridiem", null);
          break;
        case "ArrowUp":
          event.preventDefault();
          this.incrementMeridiem();
          break;
        case "ArrowDown":
          event.preventDefault();
          this.decrementMeridiem();
          break;
        case " ":
          event.preventDefault();
          break;
      }
    };
    this.meridiemDownClickHandler = () => {
      this.activeEl = this.meridiemEl;
      this.meridiemEl.focus();
      this.decrementMeridiem();
    };
    this.minuteDownClickHandler = () => {
      this.activeEl = this.minuteEl;
      this.minuteEl.focus();
      this.decrementMinute();
    };
    this.minuteUpClickHandler = () => {
      this.activeEl = this.minuteEl;
      this.minuteEl.focus();
      this.incrementMinute();
    };
    this.minuteKeyDownHandler = event => {
      const {
        key
      } = event;
      if (_key_js__WEBPACK_IMPORTED_MODULE_1__.n.includes(key)) {
        const keyAsNumber = parseInt(key);
        let newMinute;
        if ((0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.minute) && this.minute.startsWith("0")) {
          const minuteAsNumber = parseInt(this.minute);
          newMinute = minuteAsNumber > maxTenthForMinuteAndSecond ? keyAsNumber : `${minuteAsNumber}${keyAsNumber}`;
        } else {
          newMinute = keyAsNumber;
        }
        this.setValuePart("minute", newMinute);
      } else {
        switch (key) {
          case "Backspace":
          case "Delete":
            this.setValuePart("minute", null);
            break;
          case "ArrowDown":
            event.preventDefault();
            this.decrementMinute();
            break;
          case "ArrowUp":
            event.preventDefault();
            this.incrementMinute();
            break;
          case " ":
            event.preventDefault();
            break;
        }
      }
    };
    this.nudgeFractionalSecond = direction => {
      const stepDecimal = (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.step);
      const stepPrecision = (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.step);
      const fractionalSecondAsInteger = parseInt(this.fractionalSecond);
      const fractionalSecondAsFloat = parseFloat(`0.${this.fractionalSecond}`);
      let nudgedValue;
      let nudgedValueRounded;
      let nudgedValueRoundedDecimals;
      let newFractionalSecond;
      if (direction === "up") {
        nudgedValue = isNaN(fractionalSecondAsInteger) ? 0 : fractionalSecondAsFloat + stepDecimal;
        nudgedValueRounded = parseFloat(nudgedValue.toFixed(stepPrecision));
        nudgedValueRoundedDecimals = (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.g)(nudgedValueRounded);
        newFractionalSecond = nudgedValueRounded < 1 && (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(nudgedValueRoundedDecimals) > 0 ? formatTimePart(nudgedValueRoundedDecimals, stepPrecision) : "".padStart(stepPrecision, "0");
      }
      if (direction === "down") {
        nudgedValue = isNaN(fractionalSecondAsInteger) || fractionalSecondAsInteger === 0 ? 1 - stepDecimal : fractionalSecondAsFloat - stepDecimal;
        nudgedValueRounded = parseFloat(nudgedValue.toFixed(stepPrecision));
        nudgedValueRoundedDecimals = (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.g)(nudgedValueRounded);
        newFractionalSecond = nudgedValueRounded < 1 && (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(nudgedValueRoundedDecimals) > 0 && Math.sign(nudgedValueRoundedDecimals) === 1 ? formatTimePart(nudgedValueRoundedDecimals, stepPrecision) : "".padStart(stepPrecision, "0");
      }
      this.setValuePart("fractionalSecond", newFractionalSecond);
    };
    this.sanitizeValue = value => {
      const {
        hour,
        minute,
        second,
        fractionalSecond
      } = parseTimeString(value);
      if (fractionalSecond) {
        const sanitizedFractionalSecond = this.sanitizeFractionalSecond(fractionalSecond);
        return `${hour}:${minute}:${second}.${sanitizedFractionalSecond}`;
      }
      return isValidTime(value) && value;
    };
    this.sanitizeFractionalSecond = fractionalSecond => fractionalSecond && (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.step) !== fractionalSecond.length ? parseFloat(`0.${fractionalSecond}`).toFixed((0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.step)).replace("0.", "") : fractionalSecond;
    this.secondKeyDownHandler = event => {
      const {
        key
      } = event;
      if (_key_js__WEBPACK_IMPORTED_MODULE_1__.n.includes(key)) {
        const keyAsNumber = parseInt(key);
        let newSecond;
        if ((0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.second) && this.second.startsWith("0")) {
          const secondAsNumber = parseInt(this.second);
          newSecond = secondAsNumber > maxTenthForMinuteAndSecond ? keyAsNumber : `${secondAsNumber}${keyAsNumber}`;
        } else {
          newSecond = keyAsNumber;
        }
        this.setValuePart("second", newSecond);
      } else {
        switch (key) {
          case "Backspace":
          case "Delete":
            this.setValuePart("second", null);
            break;
          case "ArrowDown":
            event.preventDefault();
            this.decrementSecond();
            break;
          case "ArrowUp":
            event.preventDefault();
            this.incrementSecond();
            break;
          case " ":
            event.preventDefault();
            break;
        }
      }
    };
    this.secondDownClickHandler = () => {
      this.activeEl = this.secondEl;
      this.secondEl.focus();
      this.decrementSecond();
    };
    this.secondUpClickHandler = () => {
      this.activeEl = this.secondEl;
      this.secondEl.focus();
      this.incrementSecond();
    };
    this.setHourEl = el => this.hourEl = el;
    this.setMeridiemEl = el => this.meridiemEl = el;
    this.setMinuteEl = el => this.minuteEl = el;
    this.setSecondEl = el => this.secondEl = el;
    this.setFractionalSecondEl = el => this.fractionalSecondEl = el;
    this.setValue = value => {
      if (isValidTime(value)) {
        const {
          hour,
          minute,
          second,
          fractionalSecond
        } = parseTimeString(value);
        const {
          effectiveLocale: locale,
          numberingSystem
        } = this;
        const {
          localizedHour,
          localizedHourSuffix,
          localizedMinute,
          localizedMinuteSuffix,
          localizedSecond,
          localizedDecimalSeparator,
          localizedFractionalSecond,
          localizedSecondSuffix,
          localizedMeridiem
        } = localizeTimeStringToParts({
          value,
          locale,
          numberingSystem
        });
        this.hour = hour;
        this.minute = minute;
        this.second = second;
        this.fractionalSecond = this.sanitizeFractionalSecond(fractionalSecond);
        this.localizedHour = localizedHour;
        this.localizedHourSuffix = localizedHourSuffix;
        this.localizedMinute = localizedMinute;
        this.localizedMinuteSuffix = localizedMinuteSuffix;
        this.localizedSecond = localizedSecond;
        this.localizedDecimalSeparator = localizedDecimalSeparator;
        this.localizedFractionalSecond = localizedFractionalSecond;
        this.localizedSecondSuffix = localizedSecondSuffix;
        if (localizedMeridiem) {
          this.localizedMeridiem = localizedMeridiem;
          this.meridiem = getMeridiem(this.hour);
          const formatParts = getTimeParts({
            value,
            locale,
            numberingSystem
          });
          this.meridiemOrder = this.getMeridiemOrder(formatParts);
        }
      } else {
        this.hour = null;
        this.fractionalSecond = null;
        this.localizedHour = null;
        this.localizedHourSuffix = getLocalizedTimePartSuffix("hour", this.effectiveLocale, this.numberingSystem);
        this.localizedMeridiem = null;
        this.localizedMinute = null;
        this.localizedMinuteSuffix = getLocalizedTimePartSuffix("minute", this.effectiveLocale, this.numberingSystem);
        this.localizedSecond = null;
        this.localizedDecimalSeparator = getLocalizedDecimalSeparator(this.effectiveLocale, this.numberingSystem);
        this.localizedFractionalSecond = null;
        this.localizedSecondSuffix = getLocalizedTimePartSuffix("second", this.effectiveLocale, this.numberingSystem);
        this.meridiem = null;
        this.minute = null;
        this.second = null;
        this.value = null;
      }
    };
    this.setValuePart = (key, value) => {
      const {
        effectiveLocale: locale,
        numberingSystem
      } = this;
      if (key === "meridiem") {
        this.meridiem = value;
        if ((0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.hour)) {
          const hourAsNumber = parseInt(this.hour);
          switch (value) {
            case "AM":
              if (hourAsNumber >= 12) {
                this.hour = formatTimePart(hourAsNumber - 12);
              }
              break;
            case "PM":
              if (hourAsNumber < 12) {
                this.hour = formatTimePart(hourAsNumber + 12);
              }
              break;
          }
          this.localizedHour = localizeTimePart({
            value: this.hour,
            part: "hour",
            locale,
            numberingSystem
          });
        }
      } else if (key === "fractionalSecond") {
        const stepPrecision = (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.step);
        if (typeof value === "number") {
          this.fractionalSecond = value === 0 ? "".padStart(stepPrecision, "0") : formatTimePart(value, stepPrecision);
        } else {
          this.fractionalSecond = value;
        }
        this.localizedFractionalSecond = localizeTimePart({
          value: this.fractionalSecond,
          part: "fractionalSecond",
          locale,
          numberingSystem
        });
      } else {
        this[key] = typeof value === "number" ? formatTimePart(value) : value;
        this[`localized${capitalize(key)}`] = localizeTimePart({
          value: this[key],
          part: key,
          locale,
          numberingSystem
        });
      }
      let emit = false;
      let newValue;
      if (this.hour && this.minute) {
        newValue = `${this.hour}:${this.minute}`;
        if (this.showSecond) {
          newValue = `${newValue}:${this.second ?? "00"}`;
          if (this.showFractionalSecond && this.fractionalSecond) {
            newValue = `${newValue}.${this.fractionalSecond}`;
          }
        }
      } else {
        newValue = null;
      }
      if (this.value !== newValue) {
        emit = true;
      }
      this.value = newValue;
      this.localizedMeridiem = this.value ? localizeTimeStringToParts({
        value: this.value,
        locale,
        numberingSystem
      })?.localizedMeridiem || null : localizeTimePart({
        value: this.meridiem,
        part: "meridiem",
        locale,
        numberingSystem
      });
      if (emit) {
        this.calciteInternalTimePickerChange.emit();
      }
    };
    this.scale = "m";
    this.step = 60;
    this.numberingSystem = undefined;
    this.value = null;
    this.messages = undefined;
    this.messageOverrides = undefined;
    this.activeEl = undefined;
    this.effectiveLocale = "";
    this.fractionalSecond = undefined;
    this.hour = undefined;
    this.hourCycle = undefined;
    this.localizedDecimalSeparator = ".";
    this.localizedHour = undefined;
    this.localizedHourSuffix = undefined;
    this.localizedMeridiem = undefined;
    this.localizedFractionalSecond = undefined;
    this.localizedMinute = undefined;
    this.localizedMinuteSuffix = undefined;
    this.localizedSecond = undefined;
    this.localizedSecondSuffix = undefined;
    this.meridiem = undefined;
    this.minute = undefined;
    this.second = undefined;
    this.showFractionalSecond = undefined;
    this.showSecond = undefined;
    this.defaultMessages = undefined;
  }
  stepChange() {
    this.toggleSecond();
  }
  valueWatcher(newValue) {
    this.setValue(newValue);
  }
  onMessagesChange() {
    /* wired up by t9n util */
  }
  effectiveLocaleWatcher() {
    this.updateLocale();
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  blurHandler() {
    this.activeEl = undefined;
    this.pointerActivated = false;
    this.calciteInternalTimePickerBlur.emit();
  }
  hostFocusHandler() {
    this.calciteInternalTimePickerFocus.emit();
  }
  keyDownHandler(event) {
    this.pointerActivated = false;
    const {
      defaultPrevented,
      key
    } = event;
    if (defaultPrevented) {
      return;
    }
    switch (this.activeEl) {
      case this.hourEl:
        if (key === "ArrowRight") {
          this.focusPart("minute");
          event.preventDefault();
        }
        break;
      case this.minuteEl:
        switch (key) {
          case "ArrowLeft":
            this.focusPart("hour");
            event.preventDefault();
            break;
          case "ArrowRight":
            if (this.step !== 60) {
              this.focusPart("second");
              event.preventDefault();
            } else if (this.hourCycle === "12") {
              this.focusPart("meridiem");
              event.preventDefault();
            }
            break;
        }
        break;
      case this.secondEl:
        switch (key) {
          case "ArrowLeft":
            this.focusPart("minute");
            event.preventDefault();
            break;
          case "ArrowRight":
            if (this.showFractionalSecond) {
              this.focusPart("fractionalSecond");
            } else if (this.hourCycle === "12") {
              this.focusPart("meridiem");
              event.preventDefault();
            }
            break;
        }
        break;
      case this.fractionalSecondEl:
        switch (key) {
          case "ArrowLeft":
            this.focusPart("second");
            event.preventDefault();
            break;
          case "ArrowRight":
            if (this.hourCycle === "12") {
              this.focusPart("meridiem");
              event.preventDefault();
            }
            break;
        }
        break;
      case this.meridiemEl:
        switch (key) {
          case "ArrowLeft":
            if (this.showFractionalSecond) {
              this.focusPart("fractionalSecond");
            } else if (this.step !== 60) {
              this.focusPart("second");
              event.preventDefault();
            } else {
              this.focusPart("minute");
              event.preventDefault();
            }
            break;
        }
        break;
    }
  }
  pointerDownHandler() {
    this.pointerActivated = true;
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /**
   * Sets focus on the component's first focusable element.
   */
  setFocus() {
    var _this = this;
    return (0,_home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.c)(_this);
      _this.el?.focus();
    })();
  }
  // --------------------------------------------------------------------------
  //
  //  Private Methods
  //
  // --------------------------------------------------------------------------
  focusPart(target) {
    var _this2 = this;
    return (0,_home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.c)(_this2);
      _this2[`${target || "hour"}El`]?.focus();
    })();
  }
  toggleSecond() {
    this.showSecond = this.step < 60;
    this.showFractionalSecond = (0,_math_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.step) > 0;
  }
  getMeridiemOrder(formatParts) {
    const locale = this.effectiveLocale;
    const isRTLKind = locale === "ar" || locale === "he";
    if (formatParts && !isRTLKind) {
      const index = formatParts.findIndex(parts => {
        return parts.value === this.localizedMeridiem;
      });
      return index;
    }
    return 0;
  }
  updateLocale() {
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_3__.u)(this, this.effectiveLocale);
    this.hourCycle = getLocaleHourCycle(this.effectiveLocale, this.numberingSystem);
    this.localizedDecimalSeparator = getLocalizedDecimalSeparator(this.effectiveLocale, this.numberingSystem);
    this.setValue(this.sanitizeValue(this.value));
  }
  // --------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  // --------------------------------------------------------------------------
  connectedCallback() {
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.c)(this);
    this.updateLocale();
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_3__.c)(this);
    this.toggleSecond();
    this.meridiemOrder = this.getMeridiemOrder(getTimeParts({
      value: "0:00:00",
      locale: this.effectiveLocale,
      numberingSystem: this.numberingSystem
    }));
  }
  componentWillLoad() {
    var _this3 = this;
    return (0,_home_ohnj_Documentos_realG4Life_1_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.a)(_this3);
      yield (0,_t9n_js__WEBPACK_IMPORTED_MODULE_3__.s)(_this3);
    })();
  }
  componentDidLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.s)(this);
  }
  disconnectedCallback() {
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.d)(this);
    (0,_t9n_js__WEBPACK_IMPORTED_MODULE_3__.d)(this);
  }
  // --------------------------------------------------------------------------
  //
  //  Render Methods
  //
  // --------------------------------------------------------------------------
  render() {
    const hourIsNumber = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.hour);
    const iconScale = (0,_component_js__WEBPACK_IMPORTED_MODULE_5__.g)(this.scale);
    const minuteIsNumber = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.minute);
    const secondIsNumber = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.second);
    const fractionalSecondIsNumber = (0,_locale_js__WEBPACK_IMPORTED_MODULE_2__.i)(this.fractionalSecond);
    const showMeridiem = this.hourCycle === "12";
    return (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("div", {
      class: {
        [CSS.timePicker]: true,
        [CSS.showMeridiem]: showMeridiem,
        [CSS.showSecond]: this.showSecond,
        [CSS[`scale-${this.scale}`]]: true
      },
      dir: "ltr"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("div", {
      class: CSS.column,
      role: "group"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.hourUp,
      class: {
        [CSS.button]: true,
        [CSS.buttonHourUp]: true,
        [CSS.buttonTopLeft]: true
      },
      onClick: this.hourUpClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-up",
      scale: iconScale
    })), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.hour,
      "aria-valuemax": "23",
      "aria-valuemin": "1",
      "aria-valuenow": hourIsNumber && parseInt(this.hour) || "0",
      "aria-valuetext": this.hour,
      class: {
        [CSS.input]: true,
        [CSS.hour]: true,
        [CSS.inputFocus]: this.activeEl && this.activeEl === this.hourEl
      },
      onClick: this.inputClickHandler,
      onFocus: this.focusHandler,
      onKeyDown: this.hourKeyDownHandler,
      role: "spinbutton",
      tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setHourEl
    }, this.localizedHour || "--"), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.hourDown,
      class: {
        [CSS.button]: true,
        [CSS.buttonHourDown]: true,
        [CSS.buttonBottomLeft]: true
      },
      onClick: this.hourDownClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-down",
      scale: iconScale
    }))), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      class: CSS.delimiter
    }, this.localizedHourSuffix), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("div", {
      class: CSS.column,
      role: "group"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.minuteUp,
      class: {
        [CSS.button]: true,
        [CSS.buttonMinuteUp]: true
      },
      onClick: this.minuteUpClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-up",
      scale: iconScale
    })), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.minute,
      "aria-valuemax": "12",
      "aria-valuemin": "1",
      "aria-valuenow": minuteIsNumber && parseInt(this.minute) || "0",
      "aria-valuetext": this.minute,
      class: {
        [CSS.input]: true,
        [CSS.minute]: true,
        [CSS.inputFocus]: this.activeEl && this.activeEl === this.minuteEl
      },
      onClick: this.inputClickHandler,
      onFocus: this.focusHandler,
      onKeyDown: this.minuteKeyDownHandler,
      role: "spinbutton",
      tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setMinuteEl
    }, this.localizedMinute || "--"), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.minuteDown,
      class: {
        [CSS.button]: true,
        [CSS.buttonMinuteDown]: true
      },
      onClick: this.minuteDownClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-down",
      scale: iconScale
    }))), this.showSecond && (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      class: CSS.delimiter
    }, this.localizedMinuteSuffix), this.showSecond && (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("div", {
      class: CSS.column,
      role: "group"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.secondUp,
      class: {
        [CSS.button]: true,
        [CSS.buttonSecondUp]: true
      },
      onClick: this.secondUpClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-up",
      scale: iconScale
    })), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.second,
      "aria-valuemax": "59",
      "aria-valuemin": "0",
      "aria-valuenow": secondIsNumber && parseInt(this.second) || "0",
      "aria-valuetext": this.second,
      class: {
        [CSS.input]: true,
        [CSS.second]: true,
        [CSS.inputFocus]: this.activeEl && this.activeEl === this.secondEl
      },
      onClick: this.inputClickHandler,
      onFocus: this.focusHandler,
      onKeyDown: this.secondKeyDownHandler,
      role: "spinbutton",
      tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setSecondEl
    }, this.localizedSecond || "--"), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.secondDown,
      class: {
        [CSS.button]: true,
        [CSS.buttonSecondDown]: true
      },
      onClick: this.secondDownClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-down",
      scale: iconScale
    }))), this.showFractionalSecond && (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      class: CSS.delimiter
    }, this.localizedDecimalSeparator), this.showFractionalSecond && (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("div", {
      class: CSS.column,
      role: "group"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.fractionalSecondUp,
      class: {
        [CSS.button]: true,
        [CSS.buttonFractionalSecondUp]: true
      },
      onClick: this.fractionalSecondUpClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-up",
      scale: iconScale
    })), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.fractionalSecond,
      "aria-valuemax": "999",
      "aria-valuemin": "1",
      "aria-valuenow": fractionalSecondIsNumber && parseInt(this.fractionalSecond) || "0",
      "aria-valuetext": this.localizedFractionalSecond,
      class: {
        [CSS.input]: true,
        [CSS.fractionalSecond]: true,
        [CSS.inputFocus]: this.activeEl && this.activeEl === this.fractionalSecondEl
      },
      onClick: this.inputClickHandler,
      onFocus: this.focusHandler,
      onKeyDown: this.fractionalSecondKeyDownHandler,
      role: "spinbutton",
      tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setFractionalSecondEl
    }, this.localizedFractionalSecond || "--"), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.fractionalSecondDown,
      class: {
        [CSS.button]: true,
        [CSS.buttonFractionalSecondDown]: true
      },
      onClick: this.fractionalSecondDownClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-down",
      scale: iconScale
    }))), this.localizedSecondSuffix && (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      class: CSS.delimiter
    }, this.localizedSecondSuffix), showMeridiem && (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("div", {
      class: {
        [CSS.column]: true,
        [CSS.meridiemStart]: this.meridiemOrder === 0
      },
      role: "group"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.meridiemUp,
      class: {
        [CSS.button]: true,
        [CSS.buttonMeridiemUp]: true,
        [CSS.buttonTopRight]: true
      },
      onClick: this.meridiemUpClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-up",
      scale: iconScale
    })), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.meridiem,
      "aria-valuemax": "2",
      "aria-valuemin": "1",
      "aria-valuenow": this.meridiem === "PM" && "2" || "1",
      "aria-valuetext": this.meridiem,
      class: {
        [CSS.input]: true,
        [CSS.meridiem]: true,
        [CSS.inputFocus]: this.activeEl && this.activeEl === this.meridiemEl
      },
      onClick: this.inputClickHandler,
      onFocus: this.focusHandler,
      onKeyDown: this.meridiemKeyDownHandler,
      role: "spinbutton",
      tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.setMeridiemEl
    }, this.localizedMeridiem || "--"), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("span", {
      "aria-label": this.messages.meridiemDown,
      class: {
        [CSS.button]: true,
        [CSS.buttonMeridiemDown]: true,
        [CSS.buttonBottomRight]: true
      },
      onClick: this.meridiemDownClickHandler,
      role: "button"
    }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_8__.h)("calcite-icon", {
      icon: "chevron-down",
      scale: iconScale
    }))));
  }
  static get delegatesFocus() {
    return true;
  }
  static get assetsDirs() {
    return ["assets"];
  }
  get el() {
    return this;
  }
  static get watchers() {
    return {
      "step": ["stepChange"],
      "value": ["valueWatcher"],
      "messageOverrides": ["onMessagesChange"],
      "effectiveLocale": ["effectiveLocaleWatcher"]
    };
  }
  static get style() {
    return timePickerCss;
  }
}, [17, "calcite-time-picker", {
  "scale": [513],
  "step": [514],
  "numberingSystem": [1, "numbering-system"],
  "value": [1025],
  "messages": [1040],
  "messageOverrides": [1040],
  "activeEl": [32],
  "effectiveLocale": [32],
  "fractionalSecond": [32],
  "hour": [32],
  "hourCycle": [32],
  "localizedDecimalSeparator": [32],
  "localizedHour": [32],
  "localizedHourSuffix": [32],
  "localizedMeridiem": [32],
  "localizedFractionalSecond": [32],
  "localizedMinute": [32],
  "localizedMinuteSuffix": [32],
  "localizedSecond": [32],
  "localizedSecondSuffix": [32],
  "meridiem": [32],
  "minute": [32],
  "second": [32],
  "showFractionalSecond": [32],
  "showSecond": [32],
  "defaultMessages": [32],
  "setFocus": [64]
}, [[0, "blur", "blurHandler"], [0, "focus", "hostFocusHandler"], [0, "keydown", "keyDownHandler"], [1, "pointerdown", "pointerDownHandler"]]]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-time-picker", "calcite-icon"];
  components.forEach(tagName => {
    switch (tagName) {
      case "calcite-time-picker":
        if (!customElements.get(tagName)) {
          customElements.define(tagName, TimePicker);
        }
        break;
      case "calcite-icon":
        if (!customElements.get(tagName)) {
          (0,_icon_js__WEBPACK_IMPORTED_MODULE_7__.d)();
        }
        break;
    }
  });
}
defineCustomElement();


/***/ })

}]);
//# sourceMappingURL=node_modules_esri_calcite-components_dist_components_calcite-input-time-picker_js.js.map